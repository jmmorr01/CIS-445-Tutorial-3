*------------------------------------------------------------*
User:                jmmorr01
Date:                November 13, 2018
Time:                10:31:38
Site:                70080761
Platform:            X64_8PRO
Maintenance Release: 9.04.01M3P062415
EM Version:          14.1
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 13, 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "10:31:27" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                November 13, 2018
Time:                10:31:27
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O28KR_M3 "J:\JMMORR01\CIS 445\CIS 445 Tutorial 3\Workspaces\EMWS3\Link\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O28KR_M3 new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "J:\JMMORR01\CIS 445\CIS 445 Tutorial 3\Workspaces\EMWS3\Link\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 13, 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "10:31:27" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                jmmorr01";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70080761";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_8PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M3P062415";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "J:\JMMORR01\CIS 445\CIS 445 Tutorial 3\Workspaces\EMWS3\Link\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "J:\JMMORR01\CIS 445\CIS 445 Tutorial 3\Workspaces\EMWS3\Link\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "J:\JMMORR01\CIS 445\CIS 445 Tutorial 3\Workspaces\EMWS3\Link\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "J:\JMMORR01\CIS 445\CIS 445 Tutorial 3\Workspaces\EMWS3\Link\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 13, 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "10:31:27" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                jmmorr01";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "J:\JMMORR01\CIS 445\CIS 445 Tutorial 3\Workspaces\EMWS3\Link\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "J:\JMMORR01\CIS 445\CIS 445 Tutorial 3\Workspaces\EMWS3\Link\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "J:\JMMORR01\CIS 445\CIS 445 Tutorial 3\Workspaces\EMWS3\Link\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'J:\JMMORR01\CIS 445\CIS 445 Tutorial 3\Workspaces\EMWS3\Link\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
28028      proc freq data=EMWS3.Link_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS3.Link_VariableSet noprint;
28029      table ROLE*LEVEL/out=WORK.LinkMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.LinkMETA;
28030      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS3.LINK_VARIABLESET.
NOTE: The data set WORK.LINKMETA has 4 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.09 seconds
      cpu time            0.03 seconds
 
 
28031      proc print data=WORK.LinkMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.LinkMETA label noobs;
28032      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
28033      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
28034      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
28035      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
28036      run;
 
NOTE: There were 4 observations read from the data set WORK.LINKMETA.
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28037      title10;
MPRINT(EM_DIAGRAM):   title10;
28038      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Link: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Link: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'CIS 445 Tutorial 3';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Link Analysis';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS3.Ids_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
28414      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
28415      * Link: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * Link: Generation of macros and macro variables;
28416      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
28417      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
28418      %let EMEXCEPTIONSTRING=;
28419      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
28420      * TRAIN: Link;
MPRINT(EM_DIAGRAM):   * TRAIN: Link;
28421      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
28422      %let EM_ACTION = TRAIN;
28423      %let syscc = 0;
28424      %MACRO EM_LINKANALYSIS_MAIN;
28425        filename temp catalog 'sashelp.emexpl.link_macros.source';
28426            %include temp;
28427        filename temp;
28428
28429         %if %upcase(&EM_ACTION) = CREATE %then %do;
28430          filename temp catalog 'sashelp.emexpl.link_create.source';
28431            %include temp;
28432          filename temp;
28433          %EM_LINKANALYSIS_CREATE;
28434         %end;
28435
28436         %if %upcase(&EM_ACTION) = TRAIN %then %do;
28437          filename temp catalog 'sashelp.emexpl.link_train.source';
28438             %include temp;
28439            filename temp;
28440          %EM_LINKANALYSIS_TRAIN;
28441        %end;
28442
28443         %if %upcase(&EM_ACTION) = SCORE %then %do;
28444          filename temp catalog 'sashelp.emexpl.link_score.source';
28445          %include temp;
28446          filename temp;
28447          %EM_LINKANALYSIS_SCORE;
28448        %end;
28449
28450         %if %upcase(&EM_ACTION) = REPORT %then %do;
28451          filename temp catalog 'sashelp.emexpl.link_report.source';
28452          %include temp;
28453          filename temp;
28454          %EM_LINKANALYSIS_REPORT;
28455        %end ;
28456      %MEND EM_LINKANALYSIS_MAIN;
28457
28458      %EM_LINKANALYSIS_MAIN;
MPRINT(EM_DIAGRAM):
MPRINT(EM_LINKANALYSIS_MAIN):   filename temp catalog 'sashelp.emexpl.link_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.LINK_MACROS.SOURCE.
28459     +%macro em_linkan_nobs(ds);
28460     +  %let dsID = %sysfunc(open(&ds));
28461     +  %if &dsID %then %do;
28462     +    %let nObs = %sysfunc(attrn(&dsID,nlobsf));
28463     +    %let rc   = %sysfunc(close(&dsID));
28464     +  %end;
28465     +  &nObs
28466     +%mend em_linkan_nobs;
28469     +%macro em_linkan_appendfiles(fileref1, fileref2);/*append fileref2 to fileref1;*/
28470     +     data _null_;
28471     +       length c $256;
28472     +       fid1=fopen("&fileref1",'A');
28473     +       fid2=fopen("&fileref2",'I');
28474     +       cval = finfo(fid2,'lrecl');
28475     +       put cval= fid1= fid2=;
28476     +       if (fid2 > 0) then
28477     +         do while(fread(fid2)=0);
28478     +           rc = fget(fid2,c,256);
28479     +           _msg_=sysmsg();
28480     +           /* put rc= c= _msg_=; */
28481     +           rc = fput(fid1,strip(c));
28482     +           rc = fwrite(fid1);
28483     +         end;
28484     +         _msg_=sysmsg();
28485     +         put _msg_=;
28486     +       rc = fclose(fid1);
28487     +       rc = fclose(fid2);
28488     +     run;
28489     +%mend em_linkan_appendfiles;
28491     +%macro em_linkan_getnodesfromlinks(nodes=,links=,lookupnodes=, samegroup=Y);
28492     +   %if %upcase(&samegroup)= N %then %do;
28493     +        %let idv=%EM_ID;
28494     +        %let target=%EM_TARGET;
28495     +    %end;
28497     +    proc sql;
28498     +          create table _node1 as
28499     +            select distinct from as node %if %upcase(&samegroup)= N %then %do; , "&idv" as _group %end;
28500     +            from &links;
28501     +          create table _node2 as
28502     +            select distinct to as node %if %upcase(&samegroup)= N %then %do; , "&target" as _group %end;
28503     +            from &links;
28504     +    quit;
28506     +   %if %upcase(&samegroup)= Y %then %do;
28507     +    proc sql;
28508     +      create table _nodes_tmp as
28509     +        select node
28510     +        from _node1
28511     +       UNION
28512     +        select node
28513     +        from _node2;
28514     +    quit;
28516     +    proc sql;
28517     +    create table &nodes as
28518     +     select b.*
28519     +      from _nodes_tmp as a
28520     +          LEFT JOIN
28521     +           &lookupnodes as b
28522     +        on a.node = b.node;
28523     +    quit;
28524     +    %end;
28527     +   %if %upcase(&samegroup)= N %then %do;
28528     +    data &nodes;
28529     +          retain node _group _group_ind;
28530     +          format _group $32.;
28531     +          set _node1 _node2;
28532     +          if _group="&idv" then _group_ind=1;
28533     +          if _group="&target" then _group_ind=2;
28534     +    run;
28535     +    %end;
28537     +     proc datasets lib=work nolist;
28538     +         delete _node1 _node2 %if %upcase(&samegroup)= Y %then %do; _nodes_tmp %end;
28539     +         ;
28540     +    run;
28541     +    quit;
28543     +%mend;
28545     +%macro  em_linkan_transpose(data=,
28546     +                            trans=,
28547     +                            binout=,
28548     +                            binnum=,
28549     +                            lookup=
28550     +                            );
28552     +  /*------------------------- Bin interval vars---------------------------- */
28553     +  %if %eval(&EM_NUM_INTERVAL_INPUT+&EM_NUM_INTERVAL_REJECTED+&EM_NUM_INTERVAL_TARGET) > 0  %then %do;
28554     +            /*   Use Binning macro      */
28555     +             %em_getname(key=BINNINGCODE, type=file);
28556     +             %if "&EM_PROPERTY_BINMETHOD"="BUCKET" %then %do;
28557     +                 filename temp1 catalog 'sashelp.emapps.bucket_binning.source';
28558     +             %end;
28560     +             %if "&EM_PROPERTY_BINMETHOD"="QUANTILE" %then %do;
28561     +                 filename temp1 catalog 'sashelp.emapps.quantile_binning.source';
28562     +             %end;
28564     +             %include temp1;
28565     +             filename temp1;
28566     +             filename X "&EM_USER_BINNINGCODE";
28569     +            /* Create a temporary varset, change role to "INPUT" if (role="REJECTED" and use= Y)*/
28570     +            data _tmp_varset;
28571     +                set &EM_DATA_VARIABLESET;
28572     +                if upcase(role) = "REJECTED" and upcase(use) = "Y" and upcase(level) = "INTERVAL"
28573     +                    then role = "INPUT";
28574     +            run;
28577     +             %if "&EM_PROPERTY_BINMETHOD"="BUCKET" %then %do;
28578     +                %em_apps_bucket_binning(&EM_IMPORT_DATA, _tmp_varset, &binnum, &EM_USER_BINMAPPINGS, %str(X) , dropOriginal=N, IncludeTarget=Y);
28579     +             %end;
28580     +             %if "&EM_PROPERTY_BINMETHOD"="QUANTILE" %then %do;
28581     +                %em_apps_quantile_binning(&EM_IMPORT_DATA, _tmp_varset, &binnum, &EM_USER_BINMAPPINGS, %str(X) , dropOriginal=N, IncludeTarget=Y);
28582     +             %end;
28584     +            /*Get binned data */
28585     +             data &binout; /*will keep all original data*/
28586     +                  set &data(keep = %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT  %EM_INTERVAL_INPUT
28587     +                       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED  %EM_INTERVAL_REJECTED
28588     +                       %EM_TARGET) ;
28589     +                  %inc X;
28590     +              run;
28593     +              proc print data=&binout;run;
28594     +             filename X;
28595     +  %end;
28596     +  %else %do;             /*No interval vars */
28597     +            data &binout;
28598     +                 set &data(keep = %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
28599     +                       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
28600     +                       %EM_TARGET) ;
28601     +           run;
28602     +  %end;
28604     +  proc contents data = &binout(drop=%EM_INTERVAL_INPUT   %EM_INTERVAL_REJECTED  %EM_INTERVAL_TARGET) out = varsdata(keep =  name) noprint;
28605     +  run;
28607     +  proc sql noprint;
28608     +      select count(*) into :_numvars from varsdata;
28609     +      select name into :var1-:var%left(&_numvars) from varsdata order by name;
28610     +  quit;
28614     +/*Create Transactional data from binout */
28615     +  data &trans.;
28616     +      set &binout(drop=%EM_INTERVAL_INPUT   %EM_INTERVAL_REJECTED  %EM_INTERVAL_TARGET);
28617     +      format  tmpstr $100. item $100. level $100. _category $32.;
28618     +      drop tmpstr;
28619     +        %do i = 1 %to &_numvars ;
28620     +            newid=_N_;            /*Customer Id */
28621     +            tmpstr=cats(&&&&var&i);
28622     +            if tmpstr eq ' '    /*If variable has a missing level*/
28623     +            then do;
28624     +                 item = catx('_',SYMGET('var'||LEFT(&i)),'.');
28625     +                 level='.';
28626     +            end;
28627     +            else do;
28628     +                 item = catx('_',SYMGET('var'||LEFT(&i)),&&&&var&i);
28629     +                 level=tmpstr;
28630     +            end;
28631     +          _category=  "&&var&i." ;/*Original Var info*/
28632     +         * _category_ind= &i;
28633     +          output ;
28634     +        %end;
28635     +       keep newid item level _category;
28636     +  run;
28638     +  proc sql;
28639     +      create table &lookup as
28640     +      select distinct Item, level, _category, "%sysfunc(sasmsg(sashelp.dmine,lnka_level_valuelabel, noquote))" as _group
28641     +       from &trans;
28642     +  quit;
28646     +  /*--- delete binout ----*/
28647     +  proc delete data= &binout;run;
28648     +  proc delete data= varsdata ;run;
28650     +%mend em_linkan_transpose;
28653     +%macro em_linkan_TransAsNodesLinks(indata = ,
28654     +                                    idv=,
28655     +                                    target=,
28656     +                                    freq=,
28657     +                                    outnodes=,
28658     +                                    outlinks=
28659     +                                    );             /*Explore Transactional Data: User(From)->Product(To)*/
28661     +  /*idv: customer; target: target*/
28662     +  data &outlinks;
28663     +      set &indata;
28664     +      format from $100. to $100.;
28665     +      from = cats(&idv);
28666     +      to  = cats(&target);
28667     +      drop &idv &target;
28668     +      %if &freq eq %then %do;
28669     +      weight=1;
28670     +      %end;
28671     +        %if &freq ne %then %do;
28672     +            rename &freq=weight ;
28673     +        %end;
28674     +      linkid=_N_;
28675     +  run;
28677     +   proc sql noprint;
28678     +       select count(*) into: translinkrows
28679     +       from &outlinks;
28680     +   quit;
28682     +  %if &translinkrows>10000 %then %do;/*exception handling for links data that exceeds the row download limit of 20k */
28683     +       /*Keep only top 10k rows of links data*/
28684     +      data &outlinks;
28685     +         set &outlinks(obs=10000);
28686     +      run;
28687     +  %end;
28689     +  %em_linkan_getnodesfromlinks(nodes=&outnodes,links=&outlinks,lookupnodes=, samegroup=N);
28690     +/*
28691     +  data &outlinks;
28692     +   set &outlinks;
28693     +   rename from=&idv to=&target;
28694     +  run;*/
28696     +%mend  em_linkan_TransAsNodesLinks;
28699     +%macro em_linkan_TransToGraph_AssocSeq(indata =,
28700     +                                       nodes=,
28701     +                                       links=,
28702     +                                       same=,
28703     +                                       window=,
28704     +                                       idv=,
28705     +                                       target=,
28706     +                                       seq=,
28707     +                                       seqsuptype=,
28708     +                                       seqsupport=,
28709     +                                       assocsuptype=,
28710     +                                       assocsupport=
28711     +                                      );
28713     +       %em_getname(key=SORTEDTRANS, type=data);
28714     +       %em_getname(key=TRANSACTION, type=data);
28715     +       %em_getname(key=RecdRules, type=data);
28718     +       proc sort data=&indata out=&EM_USER_SORTEDTRANS;
28719     +            by &idv;
28720     +       run;
28722     +       data &EM_USER_SORTEDTRANS;        /*need to make sure targret is char*/
28723     +            set  &EM_USER_SORTEDTRANS;
28724     +            chartarget=cats(&target);
28725     +            drop &target;
28726     +            rename chartarget=&target;
28727     +       run;
28729     +       proc dmdb batch data=&EM_USER_SORTEDTRANS dmdbcat=cat;
28730     +            id &idv &seq;
28731     +            class &target(desc);
28732     +       run;
28735     +       /*--- If there is no sequence var in transactional data, or raw/train data ----*/
28737     +       %if (&seq. eq ) or ("&indata"="&EM_USER_TRANSACTION") %then %do;
28739     +            proc assoc data=&EM_USER_SORTEDTRANS dmdbcat=cat out=aout items=2
28740     +                        %if "&assocsuptype"="PERCENT" %then %do;
28741     +                        pctsup=&assocsupport
28742     +                        %end;
28743     +                        %if "&assocsuptype"="COUNT" %then %do;
28744     +                        support =&assocsupport
28745     +                        %end;
28746     +                ;
28747     +                cust &idv ;
28748     +                target &target;
28749     +            run;
28753     +             /*obs 2 to &nodeobs: one item set; &nodeobs+1 to &linkobs: two items set*/
28754     +            proc sql noprint;
28755     +                  select count(*) into :nodeobs from aout
28756     +                  where item2 is missing;
28757     +                  select count(*) into :linkobs from aout
28758     +                 ;
28759     +            quit;
28761     +            %let linkfirobs=%eval(&nodeobs.+1);
28763     +             /*------ Exception string : check if two item sets exist at current support level ----*/
28764     +            %if &linkobs. le &linkfirobs. %then %do;
28765     +                  %let EMEXCEPTIONSTRING = exception.server.lnka.resetsupportlevelerr;
28766     +                  %put &em_codebar;
28767     +                  %let errormsg = %sysfunc(sasmsg(sashelp.dmine, lnka.resetsupportlevel_err, noquote));
28768     +                  %put &errormsg;
28769     +                  %put &em_codebar;
28770     +                  %let errorflag=&errorflag+1;
28771     +                  %return;
28772     +            %end;
28774     +            proc rulegen in=aout out=_ruleout(where =(set_size=2)) minconf=&EM_PROPERTY_MINCONF;
28775     +            run;
28777     +            /*------ Exception string : check nobs at _ruleout , if no obs, need to reset confidence level  ----*/
28779     +            %if %em_linkan_nobs(_ruleout) = 0 %then %do;
28780     +                  %let EMEXCEPTIONSTRING = exception.server.lnka.resetconflevelerr;
28781     +                  %put &em_codebar;
28782     +                  %let errormsg = %sysfunc(sasmsg(sashelp.dmine, lnka.resetconflevel_err, noquote));
28783     +                  %put &errormsg;
28784     +                  %put &em_codebar;
28785     +                  %let errorflag=&errorflag+1;
28786     +                  %return;
28787     +            %end;
28789     +           /*Get undirected graph*/
28790     +            data  _nodes;
28791     +                  set aout(firstobs=2 obs=&nodeobs);
28792     +                  rename item1= node  count=weight;
28793     +                  keep item1 count;
28794     +            run;
28797     +            data &links;
28798     +                 set _ruleout;
28799     +                 where (_LHAND ne ' ') and (_RHAND ne ' ') and (_LHAND ne _RHAND) and (set_size=2);
28800     +                 rename  _LHAND=from ;
28801     +                 rename  _RHAND=to;
28802     +                 rename  count=weight;
28803     +                 linkid = _N_;
28804     +                 drop item1 item2 item3;   /*need to drop them or there will be confusion when renaming "from" to "item1, "to" to "item2" in RecdRules*/
28805     +            run;
28807     +       %end;      /*-- end of  %if (&seq. eq ) or ("&indata"="&EM_USER_TRANSACTION") %then %do; -------*/
28808     +       %else %do;
28809     +            /*-- If there is sequence var, note that relatioinal data does not process seq var --*/
28811     +            /*get directed graph*/
28813     +            proc assoc data=&EM_USER_SORTEDTRANS dmdbcat=cat out=aout items=1
28814     +                  %if "&assocsuptype"="PERCENT" %then %do;
28815     +                        pctsup=&assocsupport
28816     +                   %end;
28817     +                   %if "&assocsuptype"="COUNT" %then %do;
28818     +                        support =&assocsupport
28819     +                   %end;
28820     +                ;                                                                                                                                                               ;
28821     +                 cust &idv ;
28822     +                 target &target;
28823     +            run;
28825     +            proc sequence data=&EM_USER_SORTEDTRANS dmdbcat=cat assoc=aout out=_ruleout nitems=2
28826     +                   %if "&seqsuptype"="PERCENT" %then %do;
28827     +                        pctsup=&seqsupport
28828     +                    %end;
28829     +                    %if "&seqsuptype"="COUNT" %then %do;
28830     +                        support =&seqsupport
28831     +                    %end;
28832     +                 ;
28833     +                 cust &idv ;
28834     +                 target &target;
28835     +                 visit  &seq /
28836     +                 %if &same ne . %then %do;
28837     +                              same=&same
28838     +                 %end;
28839     +                 %if &window ne . %then %do;
28840     +                              window=&window
28841     +                 %end;
28842     +                  ;
28843     +            run;
28845     +             /*------ Exception string  :  check nobs at _ruleout , if no obs, need to reset support level    ----*/
28846     +            %if %em_linkan_nobs(_ruleout)=0 %then %do;
28847     +                  %let EMEXCEPTIONSTRING = exception.server.lnka.resetsupportlevelerr;
28848     +                  %put &em_codebar;
28849     +                  %let errormsg = %sysfunc(sasmsg(sashelp.dmine, lnka.resetsupportlevel_err, noquote));
28850     +                  %put &errormsg;
28851     +                  %put &em_codebar;
28852     +                  %let errorflag=&errorflag+1;
28853     +                  %return;
28854     +            %end;
28856     +            data _nodes;
28857     +                 set aout;
28858     +                 if _N_ = 1 then delete;
28859     +                 keep item1 count ;
28860     +                 rename item1=node count=weight;
28861     +            run;
28863     +            data &links;
28864     +                 set _ruleout;
28865     +                 where (iset1 ne ' ') and (iset2 ne ' ') and (iset1 ne iset2) and (nitems=2) and (conf>=&EM_PROPERTY_MINCONF);
28866     +                 rename iset1= from;
28867     +                 rename iset2=to;
28868     +                 rename  count=weight;
28869     +                 linkid=_N_;
28870     +            run;
28872     +               /*------ Exception string  :  check nobs at &linkd, if no obs, need to reset confidence level    ----*/
28873     +            %if %em_linkan_nobs(&links)=0 %then %do;
28874     +                  %let EMEXCEPTIONSTRING = exception.server.lnka.resetconflevelerr;
28875     +                  %put &em_codebar;
28876     +                  %let errormsg = %sysfunc(sasmsg(sashelp.dmine, lnka.resetconflevel_err, noquote));
28877     +                  %put &errormsg;
28878     +                  %put &em_codebar;
28879     +                  %let errorflag=&errorflag+1;
28880     +                  %return;
28881     +            %end;
28883     +       %end;
28884     +       /*Get distinct nodes from links and look up weight from _nodes*/
28885     +       %em_linkan_getnodesfromlinks(nodes=&nodes, links=&links, lookupnodes=_nodes);
28887     +       proc delete data =aout;run;
28888     +       proc delete data=_ruleout;run;
28891     +    /*-------- create Recommend Rules ---------------------*/
28893     +    data &EM_USER_RECDRULES;
28894     +        set &links;
28895     +        rename from=item1;
28896     +        rename to = item2;
28897     +        rename conf=confidence;
28898     +        rename weight= count;
28899     +        rename linkid=RuleID;
28900     +        label   to= "%sysfunc(sasmsg(sashelp.dmine, lnka_recommendeditems_vlabel , noquote))";
28901     +    run;
28903     +%mend em_linkan_TransToGraph_AssocSeq;
28905     +%macro em_linkan_recommend(intrans=, ar=, outtrans=);
28906     +/*intrans: transaction data;
28907     +  ar=association rule, i.e.,&EM_USER_RECDRULES;
28908     +  outtrans=output recommendation table;*/
28910     +  *get the recommended items;
28911     +  *assuming the length of inferences is limit to one association rule;
28912     +  %let id=%EM_ID;
28913     +  %let target=%EM_TARGET;
28914     +  proc sql;
28915     +      create table tmp1 as
28916     +      select a.&id, b.item2 as &target, sum(b.count*b.confidence)/sum(b.count) as confidence
28917     +      from &intrans a, &ar b
28918     +      where a.&target = b.item1
28919     +      group by a.&id, b.item2
28920     +      order by a.&id, confidence desc
28921     +      ;
28922     +  quit;
28924     +  proc sql noprint;
28925     +      create table tmp2 as
28926     +      select tmp1.&id, tmp1.&target
28927     +      from tmp1
28928     +      except
28929     +      select c.&id, c.&target
28930     +      from &intrans c
28931     +      ;
28932     +      create table _outtrans as
28933     +      select a.*, b.confidence
28934     +      from tmp2 a, tmp1 b
28935     +      where a.&id=b.&id and a.&target=b.&target
28936     +      order by a.&id, confidence desc
28937     +      ;
28938     +  quit;
28940     +  data &outtrans;
28941     +      set _outtrans;
28942     +      by &id; retain rank 0;
28943     +      if first.&id then rank=1;
28944     +      else rank+1;
28945     +      label   confidence= "%sysfunc(sasmsg(sashelp.dmine, lnka_confidence_vlabel , noquote))";
28946     +      label   rank= "%sysfunc(sasmsg(sashelp.dmine, lnka_rank_vlabel , noquote))";
28947     +      label   &id="%sysfunc(sasmsg(sashelp.dmine, lnka_idv_vlabel , noquote))";
28948     +  run;
28950     +  proc datasets lib=work nolist;
28951     +     delete tmp1 tmp2 _outtrans;
28952     +  run;
28953     +%mend em_linkan_recommend;
28956     +%macro em_linkan_getoverlap2_rela(trans=,overlap=,overlap2=);    /*for relational data*/
28958     +%let tarname=%EM_TARGET;
28960     +proc sql;
28961     +  create table trans2 as
28962     +  select  distinct item, level, _category as varname
28963     +  from &trans;
28964     +quit;
28966     +/*remove target's contribution for scoring:strip(trans2.varname) ne "&tarname"*/
28967     +proc sql;
28968     +  create table _overlap2 as
28969     +  select b.node, trans2.varname, trans2.level,b.ItemCluster as ItemCluster, b.intensity
28970     +  from trans2,&overlap as b
28971     +  where trans2.item=b.node and strip(trans2.varname) ne "&tarname";
28973     +  create table &overlap2 as
28974     +  select d.*, c.FORMAT, c.TYPE,c.LENGTH
28975     +   from
28976     +     _overlap2 as d
28977     +  left join
28978     +     &EM_IMPORT_DATA_CMETA as c
28979     +  on d.varname=c.NAME
28980     +  order by d.node, d.ItemCluster;
28981     +quit;
28983     +data &overlap2;
28984     +    set &overlap2;
28985     +    if strip(format) eq '$' then format = ' ';
28986     +    if missing(format) then do;
28987     +       if type eq '' then format='best32.';
28988     +        else if type eq 'N'
28989     +            then format=cats('best',length,'.');
28990     +            else format=cats('$',length,'.');
28991     +    end;
28992     +    else do;
28993     +    if index(format,'.') le 0
28994     +           then format=cats(format,'.');
28995     +    end;
28996     +    if upcase(format) eq  'BEST.'
28997     +           then format='best32.';
28998     +    drop length type;
28999     +run;
29001     +proc datasets lib=work nolist;
29002     +  delete trans2 _overlap2;
29003     +run;
29005     +%mend em_linkan_getoverlap2_rela;
29007     +%macro em_linkan_getoverlap2_trans(overlap=,overlap2=,target=);    /*for transactional data*/
29010     +proc sql;
29011     +  create table &overlap2(drop=_tmpnode_) as
29012     +  select tranwrd( _tmpnode_,"'","''") as node, *, "&target" as varname
29013     +  from &overlap(rename=(node=_tmpnode_));
29014     +quit;
29016     +%mend em_linkan_getoverlap2_trans;
29020     +/*-----------------------------------------------------------------------------------
29022     +     Call proc optgraph to get Centrality Measure and Community Info(Undirected Graph Only)
29024     +------------------------------------------------------------------------------------*/
29027     +%macro em_linkan_AnalyzeGraph(outnodes =,
29028     +                              clustering_coef =,
29029     +                              influence = ,
29030     +                              close =,
29031     +                              between =  ,
29032     +                              eigen = ,
29033     +                              eigen_algorithm = ,
29034     +                              eigen_maxiter = ,
29035     +                              hub = ,
29036     +                              auth = ,
29037     +                              seq=,
29038     +                              max_comm_size=,
29039     +                              max_diameter=,
29040     +                              relation= ,
29041     +                              commalgorithm = ,
29042     +                              link_removal_ratio = ,
29043     +                              max_iterations = ,
29044     +                              modularity = ,
29045     +                              resolution_list =
29046     +                              );
29048     +   %if &seq. eq %then %do;
29049     +       %EM_GETNAME(KEY=COMMNODE, TYPE=DATA);
29050     +       %EM_GETNAME(KEY=COMMLINK, TYPE=DATA);
29051     +       %EM_GETNAME(KEY=COMMOVERLAP, TYPE=DATA);
29052     +       %EM_GETNAME(KEY=COMMLEVEL, TYPE=DATA);
29053     +   %end;
29054     +   %EM_GETNAME(KEY=NODES, TYPE=DATA);
29055     +   %EM_GETNAME(KEY=LINKS, TYPE=DATA);
29057     +   data &EM_USER_LINKS;
29058     +       set &EM_USER_LINKS;
29059     +       weightInv=1.0/weight;
29060     +   run;
29062     +   proc optgraph
29063     +       data_nodes = &EM_USER_NODES
29064     +       data_links = &EM_USER_LINKS
29065     +    %if &seq. eq %then %do;
29066     +       graph_direction =undirected
29067     +    %end;
29068     +    %else %do;
29069     +       graph_direction =directed
29070     +    %end;
29072     +    %if &transaction_data_indicator=0 %then %do;  /*relational data*/
29073     +       out_nodes = _outnodes;
29074     +    %end;
29075     +    %else %do;
29076     +       out_nodes =&outnodes ;
29077     +    %end;
29079     +       centrality
29080     +       %if &seq. eq %then %do;
29081     +                 degree = out
29082     +               %if "&eigen"="Y" %then %do;
29083     +                 eigen = both
29084     +               eigen_algorithm =&eigen_algorithm
29085     +               eigen_maxiter = &eigen_maxiter
29086     +               %end;
29087     +       %end;
29088     +       %else %do;
29089     +                 degree = both
29090     +                %if "&hub"="Y" %then %do;
29091     +                 hub=both
29092     +                %end;
29093     +                %if "&auth"="Y" %then %do;
29094     +                 auth=both
29095     +                %end;
29096     +                %if "&hub"="Y" or "&auth"="Y" %then %do;
29097     +                 eigen_algorithm =&eigen_algorithm
29098     +                 eigen_maxiter = &eigen_maxiter
29099     +                %end;
29100     +       %end;
29101     +        %if "&clustering_coef"="Y" %then %do;
29102     +                 clustering_coef
29103     +        %end;
29104     +        %if "&influence"="Y" %then %do;
29105     +               influence = both
29106     +        %end;
29107     +        %if "&close"="Y" %then %do;
29108     +                close =   both
29109     +        %end;
29110     +        %if "&between"="Y" %then %do;
29111     +                between = both
29112     +        %end;
29113     +        %if "&close"="Y" or "&between"="Y"  %then %do;
29114     +               weight2=weightInv
29115     +        %end;
29116     +      ;
29118     +       %if &seq. eq %then %do;  /*relational or transactional with no seq*/
29119     +       community
29120     +                algorithm =  &commalgorithm
29121     +                link_removal_ratio =&link_removal_ratio
29122     +                maxiter =  &max_iterations
29123     +                modularity = &modularity
29124     +                resolution_list =  &resolution_list
29125     +              /*  recursive (max_comm_size=&max_comm_size. max_diameter=&max_diameter. relation=&relation.)    */
29126     +                out_comm_links=&EM_USER_COMMLINK
29127     +                out_community=&EM_USER_COMMNODE
29128     +                out_level=&EM_USER_COMMLEVEL
29129     +                out_overlap=&EM_USER_COMMOVERLAP
29130     +       ;
29131     +       %end;
29132     +   run;
29134     +   proc delete data=&EM_USER_NODES;run;
29136     +   /*Change Community Data, map community 0-N to 1-N+1*/
29137     +   %if &seq. eq %then %do;
29139     +       data &EM_USER_COMMLINK;
29140     +             format from_community_id $100. to_community_id $100.;
29141     +             label  from_community_id="%sysfunc(sasmsg(sashelp.dmine,lnka_from_community_id_vlabel, noquote))" ;
29142     +             label  to_community_id="%sysfunc(sasmsg(sashelp.dmine,lnka_to_community_id_vlabel, noquote))" ;
29143     +             label link_weight ="%sysfunc(sasmsg(sashelp.dmine, lnka_weight_vlabel, noquote))" ;
29144     +             label linkid ="%sysfunc(sasmsg(sashelp.dmine, lnka_linkid_vlabel, noquote))" ;
29145     +             set &EM_USER_COMMLINK;
29146     +             from_community = from_community+1;
29147     +             to_community   = to_community+1;
29148     +             from_community_id = cats(from_community);
29149     +             to_community_id   = cats(to_community);
29150     +             linkid=_N_;
29151     +             rename from_community_id =from_ItemClusterID to_community_id =to_ItemClusterID;
29152     +             drop level resolution from_community to_community;
29153     +       run;
29155     +       data &EM_USER_COMMNODE;
29156     +             format community_id $100.;
29157     +             label  community_id="%sysfunc(sasmsg(sashelp.dmine,lnka_community_id_vlabel, noquote))" ;
29158     +             label  community="%sysfunc(sasmsg(sashelp.dmine,lnka_community_1_vlabel, noquote))" ;
29159     +             label  nodes="%sysfunc(sasmsg(sashelp.dmine,lnka_nodes_vlabel, noquote))" ;
29160     +             set &EM_USER_COMMNODE;
29161     +             community = community+1;
29162     +             community_id   = cats(community);
29163     +             rename community=ItemCluster community_id=ItemClusterID;
29164     +             drop level resolution;
29165     +       run;
29167     +       data &EM_USER_COMMOVERLAP;
29168     +             format community_id $100.;
29169     +             label  community_id="%sysfunc(sasmsg(sashelp.dmine,lnka_community_id_vlabel, noquote))" ;
29170     +             label  community="%sysfunc(sasmsg(sashelp.dmine,lnka_community_1_vlabel, noquote))" ;
29171     +             label node ="%sysfunc(sasmsg(sashelp.dmine, lnka_node_vlabel, noquote))" ;
29172     +             label intensity ="%sysfunc(sasmsg(sashelp.dmine, lnka_intensity_vlabel, noquote))" ;
29173     +             label community ="%sysfunc(sasmsg(sashelp.dmine, lnka_community_1_vlabel, noquote))" ;
29174     +             label linkid ="%sysfunc(sasmsg(sashelp.dmine, lnka_linkid_vlabel, noquote))" ;
29175     +             set &EM_USER_COMMOVERLAP;
29176     +             community = community+1;
29177     +             community_id   = cats(community);
29178     +             linkid=_N_;
29179     +             rename community_id=ItemClusterID community=ItemCluster;
29180     +       run;
29183     +   %end;
29185     +   /*---- add group info: which var item is from, Only relational data has LOOKUP table**/
29187     +   %if &transaction_data_indicator=0 %then %do;
29188     +      proc sql;
29189     +           create table  &OUTNODES as
29190     +                  select  *
29191     +                  from _outnodes as A, &EM_USER_LOOKUP as B
29192     +                  where  A.node=B.Item;
29193     +           alter table  &OUTNODES  drop item;
29194     +      quit;
29195     +      proc delete data=_outnodes;run;
29196     +      proc delete data=&EM_USER_LOOKUP;
29198     +   %end;
29199     +   %else %do;/*For transactional data, add group info*/
29200     +       %let target=%EM_TARGET;
29201     +        data &EM_USER_OUTNODES;
29202     +        format _group $32.;
29203     +             set &EM_USER_OUTNODES;
29204     +        _group="&target";
29205     +        *_group_ind=1;/*don't need it for color*/
29206     +        run;
29208     +   %end;
29210     +   %if &seq. eq %then %do;
29211     +      data &OUTNODES;
29212     +           format community_id $100.;
29213     +           label  community_id="%sysfunc(sasmsg(sashelp.dmine,lnka_community_id_vlabel, noquote))" ;
29214     +           set &OUTNODES;
29215     +           community_1=community_1+1;
29216     +           community_id=cats(community_1);
29217     +           rename community_id=ItemClusterID;
29218     +    run;
29219     +   %end;
29220     +   data &OUTNODES;;
29221     +     set &OUTNODES;
29222     +     %if &transaction_data_indicator=0 %then %do;
29223     +     drop level;
29224     +     %end;
29225     +           label  node="%sysfunc(sasmsg(sashelp.dmine, lnka_node_vlabel, noquote))" ;
29226     +           label  weight="%sysfunc(sasmsg(sashelp.dmine, lnka_weight_vlabel, noquote))";
29227     +           label  _group= "%sysfunc(sasmsg(sashelp.dmine, lnka_group_vlabel, noquote))";
29228     +           label  _category= "%sysfunc(sasmsg(sashelp.dmine, lnka_category_vlabel, noquote))";
29229     +           label  community_1= "%sysfunc(sasmsg(sashelp.dmine, lnka_community_1_vlabel, noquote))";
29230     +           label  centr_degree_in= "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_degree_in_vlabel, noquote))";
29231     +           label  centr_degree_out= "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_degree_out_vlabel, noquote))";
29232     +           label  centr_degree = "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_degree_vlabel, noquote))";
29233     +           label  centr_close_wt = "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_close_wt_vlabel, noquote))";
29234     +           label  centr_close_in_wt= "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_close_in_wt_vlabel, noquote))";
29235     +           label  centr_close_out_wt= "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_close_out_wt_vlabel, noquote))";
29236     +           label  centr_close_unwt = "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_close_unwt_vlabel, noquote))";
29237     +           label  centr_close_in_unwt= "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_close_in_unwt_vlabel, noquote))";
29238     +           label  centr_close_out_unwt= "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_close_out_unwt_vlabel, noquote))";
29239     +           label  centr_between_wt = "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_between_wt_vlabel, noquote))";
29240     +           label  centr_between_unwt= "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_between_unwt_vlabel, noquote))";
29241     +           label  centr_influence1_wt = "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_influence1_wt_vlabel, noquote))";
29242     +           label  centr_influence1_unwt= "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_influence1_unwt_vlabel, noquote))";
29243     +           label  centr_influence2_wt = "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_influence2_wt_vlabel, noquote))";
29244     +           label  centr_influence2_unwt= "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_influence2_unwt_vlabel, noquote))";
29245     +           label  centr_cluster= "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_cluster_vlabel, noquote))";
29246     +           label  centr_eigen_wt = "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_eigen_wt_vlabel, noquote))";
29247     +           label  centr_eigen_unwt= "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_eigen_unwt_vlabel, noquote))";
29248     +           label  centr_auth_wt = "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_auth_wt_vlabel, noquote))";
29249     +           label  centr_auth_unwt= "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_auth_unwt_vlabel, noquote))";
29250     +           label  centr_hub_wt = "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_hub_wt_vlabel, noquote))";
29251     +           label  centr_hub_unwt= "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_hub_unwt_vlabel, noquote))";
29252     +           rename community_1=ItemCluster;
29253     +  run;
29255     +   %em_getname(key=CENTMEASURE, type=data);
29256     +   %em_getname(key=WTDCENTMEASURE, type=data);
29257     +   /*Seperate &outnodes to two tables: Unweighted Centrality Measure Table and Weighted Centrality Measure Table for bar chart output*/
29258     +   proc sql;
29259     +      create table &EM_USER_CENTMEASURE as
29260     +            select node, centr_degree_out
29261     +            %if &seq. ne  %then %do;
29262     +                , centr_degree_in ,  centr_degree
29263     +                %if "&hub"="Y" %then %do;
29264     +                  , centr_hub_unwt
29265     +                %end;
29266     +                %if "&auth"="Y" %then %do;
29267     +                  , centr_auth_unwt
29268     +                %end;
29269     +            %end;
29270     +            %else %do;
29271     +                %if "&eigen"="Y" %then %do;
29272     +                , centr_eigen_unwt
29273     +               %end;
29274     +            %end;
29275     +            %if "&clustering_coef"="Y" %then %do;
29276     +                 , centr_cluster
29277     +             %end;
29278     +             %if "&close"="Y" %then %do;
29279     +                   , centr_close_unwt
29280     +             %end;
29281     +             %if "&between"="Y" %then %do;
29282     +                   , centr_between_unwt
29283     +             %end;
29284     +             %if "&influence"="Y" %then %do;
29285     +                  , centr_influence1_unwt
29286     +                  , centr_influence2_unwt
29287     +             %end;
29288     +            from &outnodes;
29290     +      create table &EM_USER_WTDCENTMEASURE as
29291     +            select node, centr_degree_out
29292     +            %if &seq. ne  %then %do;
29293     +                , centr_degree_in ,  centr_degree
29294     +                %if "&hub"="Y" %then %do;
29295     +                 , centr_hub_wt
29296     +                %end;
29297     +                %if "&auth"="Y" %then %do;
29298     +                  , centr_auth_wt
29299     +                %end;
29300     +            %end;
29301     +            %else %do;
29302     +                %if "&eigen"="Y" %then %do;
29303     +                , centr_eigen_wt
29304     +               %end;
29305     +            %end;
29306     +            %if "&clustering_coef"="Y" %then %do;
29307     +                 , centr_cluster
29308     +             %end;
29309     +             %if "&close"="Y" %then %do;
29310     +                  , centr_close_wt
29311     +             %end;
29312     +             %if "&between"="Y" %then %do;
29313     +                  , centr_between_wt
29314     +             %end;
29315     +             %if "&influence"="Y" %then %do;
29316     +                  , centr_influence1_wt
29317     +                  , centr_influence2_wt
29318     +             %end;
29319     +            from &outnodes;
29320     +   quit;
29323     +data &EM_USER_LINKS;
29324     +set &EM_USER_LINKS;
29325     +drop weightInv;
29326     +run;
29328     +%mend em_linkan_AnalyzeGraph;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_LINKANALYSIS_MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_LINKANALYSIS_MAIN):   filename temp catalog 'sashelp.emexpl.link_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.LINK_TRAIN.SOURCE.
29331     +%macro EM_LINKANALYSIS_TRAIN;
29332     +%global transaction_data_indicator;
29333     +%global errorflag;
29334     +%let transaction_data_indicator =0;
29335     +%let errorflag=0;
29337     +%let maxinput = 10000;
29338     +%if %symexist(em_link_maxinput) %then %do;
29339     +    %let maxinput = &em_link_maxinput;
29340     +%end;
29343     +/*----------------------------------------Exception Handling-------------------------------------------------------------*/
29344     +/******************************************************************
29345     +*********************Check Input Data******************************
29346     +*******************************************************************/
29347     +/*check if input data is transactional data*/
29349     +%if "&EM_IMPORT_TRANSACTION" ne "" and (%sysfunc(exist(&EM_IMPORT_TRANSACTION)) or %sysfunc(exist(&EM_IMPORT_TRANSACTION, view))) %then %do;
29350     +      %let transaction_data_indicator=1;
29351     +%end;
29352     +%else %do;  /*else check if input data is train or raw data*/
29354     +      %let raw_or_train_data_indicator=0;
29356     +      %if "&EM_IMPORT_DATA" ne "" and (%sysfunc(exist(&EM_IMPORT_DATA)) or
29357     +      %sysfunc(exist(&EM_IMPORT_DATA, view))) %then  %do;
29358     +            %let  raw_or_train_data_indicator=1;
29359     +      %end;
29360     +      /*pop out error msg if input data is of other kinds*/
29361     +      %else %do;
29362     +          %let EMEXCEPTIONSTRING = exception.server.lnka.datatypeerr;
29363     +          %put &em_codebar;
29364     +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, lnka.datatype_err, noquote));
29365     +          %put &errormsg;
29366     +          %put &em_codebar;
29367     +          %return;
29368     +      %end;
29370     +%end;
29372     +/********************************************************************
29373     +*********************Check Input Variables**************************
29374     +*********************************************************************/
29376     +/****************************************************************************************************/
29377     +/* 1.Transactional Data Input Vars: One ID, One Target, One Sequence(optional) , One Freq(optional);*/
29378     +/****************************************************************************************************/
29380     +%if  &transaction_data_indicator=1 %then %do;
29381     +     /*-------------------------------------------------------------------------*/
29382     +      * process only when there is one ID Var, otherwise exception message;
29383     +     /*-------------------------------------------------------------------------*/
29384     +      %if &EM_NUM_ID ne 1 %then %do;
29386     +          %let EMEXCEPTIONSTRING = exception.server.lnka.idvarnumerr;
29387     +          %put &em_codebar;
29388     +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, lnka.idvarnum_err, noquote));
29389     +          %put &errormsg;
29390     +          %put &em_codebar;
29391     +          %return;
29393     +      %end;
29394     +      %else %do;
29396     +          *** proceed when there is one ID: check levels,should be nominal or interval  ;
29397     +          data _null_;
29398     +                 set &EM_DATA_VARIABLESET(where=(upcase(role)='ID'));
29399     +                 call symput('IDLevel',   strip(upcase(level)));
29400     +          run;
29402     +          %if (&IDLevel ne INTERVAL) and (&IDLevel ne NOMINAL) %then %do;
29403     +                %let EMEXCEPTIONSTRING = exception.server.lnka.idlevelerr;
29404     +                %put &em_codebar;
29405     +                %let errormsg = %sysfunc(sasmsg(sashelp.dmine, lnka.idlevel_err, noquote));
29406     +                %put &errormsg;
29407     +                %put &em_codebar;
29408     +                %return;
29409     +          %end;
29411     +      %end;
29413     +     /*-------------------------------------------------------------------------*/
29414     +      * process only when there is one Target Var, otherwise exception message;
29415     +     /*-------------------------------------------------------------------------*/
29416     +      %if &EM_NUM_TARGET ne 1 %then %do;
29418     +          %let EMEXCEPTIONSTRING = exception.server.lnka.targetvarnumerr;
29419     +          %put &em_codebar;
29420     +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, lnka.targetvarnum_err, noquote));
29421     +          %put &errormsg;
29422     +          %put &em_codebar;
29423     +          %return;
29425     +      %end;
29426     +      %else %do;
29428     +          *** proceed when there is one TARGET: check levels, should be interval or nominal;
29429     +         data _null_;
29430     +                 set &EM_DATA_VARIABLESET(where=(upcase(role)='TARGET'));
29431     +                 call symput('TargetLevel',   strip(upcase(level)));
29432     +             run;
29434     +             %if (&TargetLevel ne INTERVAL) and (&TargetLevel ne NOMINAL) %then %do;
29435     +                   %let EMEXCEPTIONSTRING = exception.server.lnka.targetlevelerr;
29436     +                %put &em_codebar;
29437     +                %let errormsg = %sysfunc(sasmsg(sashelp.dmine, lnka.taregtlevel_err, noquote));
29438     +                %put &errormsg;
29439     +                %put &em_codebar;
29440     +                %return;
29441     +             %end;
29443     +      %end;
29445     +     /*----------------------------------------------------------------------------------*/
29446     +      * process only when there is no more than one Sequence Var, otherwise exception message;
29447     +     /*-----------------------------------------------------------------------------------*/
29449     +      %if &EM_NUM_SEQUENCE gt 1 %then %do;
29451     +          %let EMEXCEPTIONSTRING = exception.server.lnka.seqvarnumerr;
29452     +          %put &em_codebar;
29453     +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, lnka.seqvarnum_err, noquote));
29454     +          %put &errormsg;
29455     +          %put &em_codebar;
29456     +          %return;
29458     +      %end;
29459     +      %else %do;
29461     +          *** proceed when there is one Sequence Var: check levels, should be interval;
29462     +          %if &EM_NUM_SEQUENCE = 1 %then %do;
29463     +                data _null_;
29464     +                       set &EM_DATA_VARIABLESET(where=(upcase(role)='SEQUENCE'));
29465     +                       call symput('SeqLevel',   strip(upcase(level)));
29466     +                run;
29467     +                %if  &SeqLevel ne INTERVAL  %then %do;
29468     +                      %let EMEXCEPTIONSTRING = exception.server.lnka.seqlevelerr;
29469     +                      %put &em_codebar;
29470     +                      %let errormsg = %sysfunc(sasmsg(sashelp.dmine, lnka.seqlevel_err, noquote));
29471     +                      %put &errormsg;
29472     +                      %put &em_codebar;
29473     +                      %return;
29474     +                %end;
29475     +          %end;
29476     +      %end;
29478     +     /*----------------------------------------------------------------------------*/
29479     +      * process only when there is no more than one Freq Var, otherwise exception message;
29480     +     /*-----------------------------------------------------------------------------*/
29482     +      %if &EM_NUM_FREQ gt 1 %then %do;
29484     +          %let EMEXCEPTIONSTRING = exception.server.lnka.freqvarnumerr;
29485     +          %put &em_codebar;
29486     +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, lnka.freqvarnum_err, noquote));
29487     +          %put &errormsg;
29488     +          %put &em_codebar;
29489     +          %return;
29491     +      %end;
29492     +      %else %do;
29493     +          *** proceed when there is one Freq Var: check levels, should be interval;
29494     +            %if &EM_NUM_FREQ = 1 %then %do;
29496     +               data _null_;
29497     +                       set &EM_DATA_VARIABLESET(where=(upcase(role)='FREQ'));
29498     +                       call symput('FreqLevel',   strip(upcase(level)));
29499     +                   run;
29501     +                   %if  &FreqLevel ne INTERVAL  %then %do;
29502     +                        %let EMEXCEPTIONSTRING = exception.server.lnka.freqlevelerr;
29503     +                      %put &em_codebar;
29504     +                      %let errormsg = %sysfunc(sasmsg(sashelp.dmine, lnka.freqlevel_err, noquote));
29505     +                      %put &errormsg;
29506     +                      %put &em_codebar;
29507     +                      %return;
29508     +                   %end;
29510     +            %end;
29511     +      %end;
29513     +%end;   /* end of %if  &transaction_data_indicator=1 %then %do;  */
29514     +%else %do;
29515     +/************************************************************************************************/
29516     +/* 2. Relational Data Input Vars: At least Two  Vars; */
29517     +/************************************************************************************************/
29519     +  %let _nvars = %eval(&EM_NUM_INTERVAL_INPUT+&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT  +  &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_REJECTED + &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_TARGET);
29520     +  %if &_nvars < 2 %then %do;
29521     +          %let EMEXCEPTIONSTRING = exception.server.lnka.inputvarnumerr;
29522     +          %put &em_codebar;
29523     +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, lnka.inputvarnum_err, noquote));
29524     +          %put &errormsg;
29525     +          %put &em_codebar;
29526     +          %return;
29527     +  %end;
29528     +  %else %if &_nvars > &maxinput %then %do;
29529     +          %let EMEXCEPTIONSTRING = exception.server.lnka.numvarerr;
29530     +          %put &em_codebar;
29531     +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, lnka.numvar_err, noquote));
29532     +          %put &errormsg;
29533     +          %put &em_codebar;
29534     +          %return;
29535     +   %end;
29536     +%end;
29538     +/*----------------------------------------End Exception Handling-------------------------------------------------------------*/
29540     +/*********************************************************************
29541     +********************************Training******************************
29542     +*********************************************************************/
29543     +%em_getname(key=NODES, type=data);
29544     +%em_getname(key=LINKS, type=data);
29545     +%em_getname(key=OUTNODES, type=data);
29546     +%em_getname(key=RULES, type=data);
29549     +%let assocsup=;
29550     +%let seqsup=;
29551     +%if "&EM_PROPERTY_ASSOCSUPPORTTYPE"="PERCENT" %then %do;
29552     +      %let assocsup=&EM_PROPERTY_ASSOCPCTSUPPORT;
29553     +%end;
29554     +%if "&EM_PROPERTY_ASSOCSUPPORTTYPE"="COUNT" %then %do;
29555     +      %let assocsup=&EM_PROPERTY_ASSOCSUPPORT;
29556     +%end;
29558     +%if "&EM_PROPERTY_SEQSUPPORTTYPE"="PERCENT" %then %do;
29559     +      %let seqsup=&EM_PROPERTY_SEQPCTSUPPORT;
29560     +%end;
29561     +%if "&EM_PROPERTY_SEQSUPPORTTYPE"="COUNT" %then %do;
29562     +    %let seqsup=&EM_PROPERTY_SEQSUPPORT;
29563     +%end;
29566     +/*-----  If input data is transactional data -----------*/
29568     +%if  &transaction_data_indicator eq 1  %then %do;
29570     +            %let id_vars =%EM_ID;
29571     +            %let target_vars=  %EM_TARGET;
29572     +            %let freq_vars= %EM_FREQ;
29573     +            %let seq_vars= %EM_SEQUENCE;
29576     +            /*Two optional parameters, SAME and WINDOW, are available to define what is 'after'. The rule A==>B
29577     +              implies SAME < TimeB - TimeA <= WINDOW.*/
29579     +            %if "&seq_vars" ne "" and "&EM_PROPERTY_SAME" ne "." and "&EM_PROPERTY_WINDOW" ne "." %then %do;
29580     +                %if %sysevalf(&EM_PROPERTY_SAME - &EM_PROPERTY_WINDOW ) ge 0 %then %do;
29581     +                  %let EMEXCEPTIONSTRING = exception.server.lnka.invalidsamewindowerr;
29582     +                  %put &em_codebar;
29583     +                  %let errormsg = %sysfunc(sasmsg(sashelp.dmine, lnka.invalidsamewindow_err, noquote));
29584     +                  %put &errormsg;
29585     +                  %put &em_codebar;
29586     +                  %return;
29587     +                %end;
29588     +            %end;
29590     +            /*Explore Transactional Data Only-not for relational data*/
29591     +            %em_getname(key=TransLinks, type=data);
29592     +            %em_getname(key=TransNodes, type=data);
29594     +            %em_linkan_TransAsNodesLinks(indata=&EM_IMPORT_TRANSACTION,
29595     +                                         idv=&id_vars,
29596     +                                         target=&target_vars,
29597     +                                         freq=&freq_vars,
29598     +                                         outnodes=&EM_USER_TransNodes,
29599     +                                         outlinks=&EM_USER_TransLinks
29600     +                                         );
29601     +            %if &errorflag %then %return;
29603     +            %em_linkan_TransToGraph_AssocSeq(indata=&EM_IMPORT_TRANSACTION,
29604     +                                             nodes=&EM_USER_NODES,
29605     +                                             links=&EM_USER_LINKS,
29606     +                                             same=&EM_PROPERTY_SAME,
29607     +                                             window=&EM_PROPERTY_WINDOW,
29608     +                                             idv=&id_vars,
29609     +                                             target=&target_vars,
29610     +                                             seq=&seq_vars,
29611     +                                             seqsuptype= &EM_PROPERTY_SEQSUPPORTTYPE,
29612     +                                             seqsupport=&seqsup,
29613     +                                             assocsuptype=  &EM_PROPERTY_ASSOCSUPPORTTYPE,
29614     +                                             assocsupport=&assocsup
29615     +                                             );
29616     +            %if &errorflag %then %return;
29617     +%end;
29618     +%else %do;
29620     +/*--------------- If input data is train or raw data, transform to transactional data -------------------*/
29621     +/*--------------- relational data-> binning-> Assoc ->Graph -> Centrality -------------------------------*/
29623     +            %em_getname(key=TRANS, type=data);
29624     +            %em_getname(key=BINMAPPINGS, type=data);
29625     +            %em_getname(key=BINOUT, type=data);
29626     +            %em_getname(key=LOOKUP, type=data);
29628     +            /*----- binning and transform to trasactional data --------------*/
29629     +            %em_linkan_transpose(data= &EM_IMPORT_DATA,
29630     +                                 trans=&EM_USER_TRANS,
29631     +                                 binout=&EM_USER_BINOUT,
29632     +                                 binnum= &EM_PROPERTY_NUMBIN,
29633     +                                 lookup=&EM_USER_LOOKUP
29634     +                                 );
29635     +            %if &errorflag %then %return;
29637     +            %let id_vars =newid;
29638     +            %let target_vars= Item  ;
29639     +            %let seq_vars= ;
29641     +            /*----------------   Assoc --------------------------------------*/
29643     +           %em_linkan_TransToGraph_AssocSeq(indata=&EM_USER_TRANS,
29644     +                                             nodes=&EM_USER_NODES,
29645     +                                             links=&EM_USER_LINKS,
29646     +                                             same=&EM_PROPERTY_SAME,
29647     +                                             window=&EM_PROPERTY_WINDOW,
29648     +                                             idv=&id_vars,
29649     +                                             target=&target_vars,
29650     +                                             seq=&seq_vars,
29651     +                                             seqsuptype= &EM_PROPERTY_SEQSUPPORTTYPE,
29652     +                                             seqsupport=&seqsup,
29653     +                                             assocsuptype=  &EM_PROPERTY_ASSOCSUPPORTTYPE,
29654     +                                             assocsupport=&assocsup
29655     +                                             );
29656     +            %if &errorflag %then %return;
29658     +%end;
29660     +/*----------------   Calculate Centrality  and community -----------------------*/
29662     +%em_linkan_AnalyzeGraph(outnodes=&EM_USER_OUTNODES,
29663     +                        clustering_coef=&EM_PROPERTY_CLUSTERINGCOEF,
29664     +                        influence = &EM_PROPERTY_INFLUENCE,
29665     +                        close =  &EM_PROPERTY_CLOSE,
29666     +                        between =  &EM_PROPERTY_BETWEEN ,
29667     +                        eigen =  &EM_PROPERTY_EIGEN ,
29668     +                        eigen_algorithm = &EM_PROPERTY_EIGEN_ALGORITHM,
29669     +                                     eigen_maxiter = &EM_PROPERTY_EIGEN_MAXITER ,
29670     +                                     hub = &EM_PROPERTY_HUB ,
29671     +                                     auth = &EM_PROPERTY_AUTH,
29672     +                                     seq=&seq_vars ,
29673     +                                     max_comm_size=&EM_PROPERTY_MAX_COMM_SIZE,
29674     +                                     max_diameter=&EM_PROPERTY_MAX_DIAMETER,
29675     +                                     relation=&EM_PROPERTY_RELATION,
29676     +                                     commalgorithm =&EM_PROPERTY_COMMALGORITHM,
29677     +                                     link_removal_ratio =  &EM_PROPERTY_LINK_REMOVAL_RATIO,
29678     +                                     max_iterations = &EM_PROPERTY_MAX_ITERATIONS,
29679     +                                     modularity = &EM_PROPERTY_MODULARITY,
29680     +                                     resolution_list = &EM_PROPERTY_RESOLUTION_LIST
29681     +                                     );
29682     +%if &errorflag %then %return;
29685     +%mend EM_LINKANALYSIS_TRAIN;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_LINKANALYSIS_MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_LINKANALYSIS_TRAIN):   * process only when there is one ID Var, otherwise exception message;
MPRINT(EM_LINKANALYSIS_TRAIN):   *** proceed when there is one ID: check levels,should be nominal or interval ;
MPRINT(EM_LINKANALYSIS_TRAIN):   data _null_;
MPRINT(EM_LINKANALYSIS_TRAIN):   set EMWS3.Link_VariableSet(where=(upcase(role)='ID'));
MPRINT(EM_LINKANALYSIS_TRAIN):   call symput('IDLevel', strip(upcase(level)));
MPRINT(EM_LINKANALYSIS_TRAIN):   run;
 
NOTE: There were 1 observations read from the data set EMWS3.LINK_VARIABLESET.
      WHERE UPCASE(role)='ID';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_LINKANALYSIS_TRAIN):   * process only when there is one Target Var, otherwise exception message;
MPRINT(EM_LINKANALYSIS_TRAIN):   *** proceed when there is one TARGET: check levels, should be interval or nominal;
MPRINT(EM_LINKANALYSIS_TRAIN):   data _null_;
MPRINT(EM_LINKANALYSIS_TRAIN):   set EMWS3.Link_VariableSet(where=(upcase(role)='TARGET'));
MPRINT(EM_LINKANALYSIS_TRAIN):   call symput('TargetLevel', strip(upcase(level)));
MPRINT(EM_LINKANALYSIS_TRAIN):   run;
 
NOTE: There were 1 observations read from the data set EMWS3.LINK_VARIABLESET.
      WHERE UPCASE(role)='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_LINKANALYSIS_TRAIN):   * process only when there is no more than one Sequence Var, otherwise exception message;
MPRINT(EM_LINKANALYSIS_TRAIN):   *** proceed when there is one Sequence Var: check levels, should be interval;
MPRINT(EM_LINKANALYSIS_TRAIN):   data _null_;
MPRINT(EM_LINKANALYSIS_TRAIN):   set EMWS3.Link_VariableSet(where=(upcase(role)='SEQUENCE'));
MPRINT(EM_LINKANALYSIS_TRAIN):   call symput('SeqLevel', strip(upcase(level)));
MPRINT(EM_LINKANALYSIS_TRAIN):   run;
 
NOTE: There were 1 observations read from the data set EMWS3.LINK_VARIABLESET.
      WHERE UPCASE(role)='SEQUENCE';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_LINKANALYSIS_TRAIN):   * process only when there is no more than one Freq Var, otherwise exception message;
MPRINT(EM_LINKANALYSIS_TRAIN):   *** proceed when there is one Freq Var: check levels, should be interval;
MPRINT(EM_LINKANALYSIS_TRAIN):  ;
MPRINT(EM_LINKANALYSIS_TRAIN):  ;
MPRINT(EM_LINKANALYSIS_TRAIN):  ;
MPRINT(EM_LINKANALYSIS_TRAIN):  ;
MPRINT(EM_LINKANALYSIS_TRAIN):  ;
MPRINT(EM_LINKANALYSIS_TRAIN):  ;
MPRINT(EM_LINKAN_TRANSASNODESLINKS):   data EMWS3.Link_TransLinks;
MPRINT(EM_LINKAN_TRANSASNODESLINKS):   set EMWS3.Ids_DATA;
MPRINT(EM_LINKAN_TRANSASNODESLINKS):   format from $100. to $100.;
MPRINT(EM_LINKAN_TRANSASNODESLINKS):   from = cats(session_id);
MPRINT(EM_LINKAN_TRANSASNODESLINKS):   to = cats(requested_file);
MPRINT(EM_LINKAN_TRANSASNODESLINKS):   drop session_id requested_file;
MPRINT(EM_LINKAN_TRANSASNODESLINKS):   weight=1;
MPRINT(EM_LINKAN_TRANSASNODESLINKS):   linkid=_N_;
MPRINT(EM_LINKAN_TRANSASNODESLINKS):   run;
 
NOTE: View EMWS3.IDS_DATA.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
 
NOTE: There were 4979 observations read from the data set SAMPSIO.WEBPATH.
NOTE: There were 4979 observations read from the data set EMWS3.IDS_DATA.
NOTE: The data set EMWS3.LINK_TRANSLINKS has 4979 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.19 seconds
      cpu time            0.09 seconds
 
 
MPRINT(EM_LINKAN_TRANSASNODESLINKS):   proc sql noprint;
MPRINT(EM_LINKAN_TRANSASNODESLINKS):   select count(*) into: translinkrows from EMWS3.Link_TransLinks;
MPRINT(EM_LINKAN_TRANSASNODESLINKS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_LINKAN_GETNODESFROMLINKS):   proc sql;
MPRINT(EM_LINKAN_GETNODESFROMLINKS):   create table _node1 as select distinct from as node , "session_id" as _group from EMWS3.Link_TransLinks;
NOTE: Table WORK._NODE1 created, with 290 rows and 2 columns.
 
MPRINT(EM_LINKAN_GETNODESFROMLINKS):   create table _node2 as select distinct to as node , "requested_file" as _group from EMWS3.Link_TransLinks;
NOTE: Table WORK._NODE2 created, with 76 rows and 2 columns.
 
MPRINT(EM_LINKAN_GETNODESFROMLINKS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.17 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_LINKAN_GETNODESFROMLINKS):   data EMWS3.Link_TransNodes;
MPRINT(EM_LINKAN_GETNODESFROMLINKS):   retain node _group _group_ind;
MPRINT(EM_LINKAN_GETNODESFROMLINKS):   format _group $32.;
MPRINT(EM_LINKAN_GETNODESFROMLINKS):   set _node1 _node2;
MPRINT(EM_LINKAN_GETNODESFROMLINKS):   if _group="session_id" then _group_ind=1;
MPRINT(EM_LINKAN_GETNODESFROMLINKS):   if _group="requested_file" then _group_ind=2;
MPRINT(EM_LINKAN_GETNODESFROMLINKS):   run;
 
NOTE: There were 290 observations read from the data set WORK._NODE1.
NOTE: There were 76 observations read from the data set WORK._NODE2.
NOTE: The data set EMWS3.LINK_TRANSNODES has 366 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_LINKAN_GETNODESFROMLINKS):   proc datasets lib=work nolist;
MPRINT(EM_LINKAN_GETNODESFROMLINKS):   delete _node1 _node2 ;
MPRINT(EM_LINKAN_GETNODESFROMLINKS):   run;
 
NOTE: Deleting WORK._NODE1 (memtype=DATA).
NOTE: Deleting WORK._NODE2 (memtype=DATA).
MPRINT(EM_LINKAN_GETNODESFROMLINKS):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_LINKAN_TRANSASNODESLINKS):  ;
MPRINT(EM_LINKANALYSIS_TRAIN):  ;
MPRINT(EM_LINKAN_TRANSTOGRAPH_ASSOCSEQ):  ;
MPRINT(EM_LINKAN_TRANSTOGRAPH_ASSOCSEQ):  ;
MPRINT(EM_LINKAN_TRANSTOGRAPH_ASSOCSEQ):  ;
MPRINT(EM_LINKAN_TRANSTOGRAPH_ASSOCSEQ):   proc sort data=EMWS3.Ids_DATA out=EMWS3.Link_SORTEDTRANS;
MPRINT(EM_LINKAN_TRANSTOGRAPH_ASSOCSEQ):   by session_id;
MPRINT(EM_LINKAN_TRANSTOGRAPH_ASSOCSEQ):   run;
 
NOTE: There were 4979 observations read from the data set EMWS3.IDS_DATA.
NOTE: View EMWS3.IDS_DATA.VIEW used (Total process time):
      real time           0.08 seconds
      cpu time            0.04 seconds
 
NOTE: There were 4979 observations read from the data set SAMPSIO.WEBPATH.
NOTE: The data set EMWS3.LINK_SORTEDTRANS has 4979 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.25 seconds
      cpu time            0.07 seconds
 
 
MPRINT(EM_LINKAN_TRANSTOGRAPH_ASSOCSEQ):   data EMWS3.Link_SORTEDTRANS;
MPRINT(EM_LINKAN_TRANSTOGRAPH_ASSOCSEQ):   set EMWS3.Link_SORTEDTRANS;
MPRINT(EM_LINKAN_TRANSTOGRAPH_ASSOCSEQ):   chartarget=cats(requested_file);
MPRINT(EM_LINKAN_TRANSTOGRAPH_ASSOCSEQ):   drop requested_file;
MPRINT(EM_LINKAN_TRANSTOGRAPH_ASSOCSEQ):   rename chartarget=requested_file;
MPRINT(EM_LINKAN_TRANSTOGRAPH_ASSOCSEQ):   run;
 
NOTE: There were 4979 observations read from the data set EMWS3.LINK_SORTEDTRANS.
NOTE: The data set EMWS3.LINK_SORTEDTRANS has 4979 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.29 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_LINKAN_TRANSTOGRAPH_ASSOCSEQ):   proc dmdb batch data=EMWS3.Link_SORTEDTRANS dmdbcat=cat;
MPRINT(EM_LINKAN_TRANSTOGRAPH_ASSOCSEQ):   id session_id session_sequence;
MPRINT(EM_LINKAN_TRANSTOGRAPH_ASSOCSEQ):   class requested_file(desc);
MPRINT(EM_LINKAN_TRANSTOGRAPH_ASSOCSEQ):   run;
 
NOTE: Records processed = 4979   Memory used = 511K.
NOTE: There were 4979 observations read from the data set EMWS3.LINK_SORTEDTRANS.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.20 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_LINKAN_TRANSTOGRAPH_ASSOCSEQ):   proc assoc data=EMWS3.Link_SORTEDTRANS dmdbcat=cat out=aout items=1 support =1 ;
MPRINT(EM_LINKAN_TRANSTOGRAPH_ASSOCSEQ):   ;
MPRINT(EM_LINKAN_TRANSTOGRAPH_ASSOCSEQ):   cust session_id ;
MPRINT(EM_LINKAN_TRANSTOGRAPH_ASSOCSEQ):   target requested_file;
MPRINT(EM_LINKAN_TRANSTOGRAPH_ASSOCSEQ):   run;
 
 
----- Potential 1 item sets = 76 -----
Counting items, records read:     4979
Number of customers:               290
Support level for item sets:         1
Maximum count for a set:           197
Sets meeting support level:         76
Megs of memory used:              0.51
NOTE: The data set WORK.AOUT has 77 observations and 3 variables.
NOTE: PROCEDURE ASSOC used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_LINKAN_TRANSTOGRAPH_ASSOCSEQ):   proc sequence data=EMWS3.Link_SORTEDTRANS dmdbcat=cat assoc=aout out=_ruleout nitems=2 pctsup=1 ;
MPRINT(EM_LINKAN_TRANSTOGRAPH_ASSOCSEQ):   cust session_id ;
MPRINT(EM_LINKAN_TRANSTOGRAPH_ASSOCSEQ):   target requested_file;
MPRINT(EM_LINKAN_TRANSTOGRAPH_ASSOCSEQ):   visit session_sequence / ;
MPRINT(EM_LINKAN_TRANSTOGRAPH_ASSOCSEQ):   run;
 
Large itemsets:              76
Total records read:        4979
Customer count:             290
Support set to:               2
Total sequences formed:      882
Number >= support           485
Memory allocated megs:        6
NOTE: The data set WORK._RULEOUT has 485 observations and 8 variables.
NOTE: PROCEDURE SEQUENCE used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_LINKAN_TRANSTOGRAPH_ASSOCSEQ):   data _nodes;
MPRINT(EM_LINKAN_TRANSTOGRAPH_ASSOCSEQ):   set aout;
MPRINT(EM_LINKAN_TRANSTOGRAPH_ASSOCSEQ):   if _N_ = 1 then delete;
MPRINT(EM_LINKAN_TRANSTOGRAPH_ASSOCSEQ):   keep item1 count ;
MPRINT(EM_LINKAN_TRANSTOGRAPH_ASSOCSEQ):   rename item1=node count=weight;
MPRINT(EM_LINKAN_TRANSTOGRAPH_ASSOCSEQ):   run;
 
NOTE: There were 77 observations read from the data set WORK.AOUT.
NOTE: The data set WORK._NODES has 76 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_LINKAN_TRANSTOGRAPH_ASSOCSEQ):   data EMWS3.Link_LINKS;
MPRINT(EM_LINKAN_TRANSTOGRAPH_ASSOCSEQ):   set _ruleout;
MPRINT(EM_LINKAN_TRANSTOGRAPH_ASSOCSEQ):   where (iset1 ne ' ') and (iset2 ne ' ') and (iset1 ne iset2) and (nitems=2) and (conf>=50);
MPRINT(EM_LINKAN_TRANSTOGRAPH_ASSOCSEQ):   rename iset1= from;
MPRINT(EM_LINKAN_TRANSTOGRAPH_ASSOCSEQ):   rename iset2=to;
MPRINT(EM_LINKAN_TRANSTOGRAPH_ASSOCSEQ):   rename count=weight;
MPRINT(EM_LINKAN_TRANSTOGRAPH_ASSOCSEQ):   linkid=_N_;
MPRINT(EM_LINKAN_TRANSTOGRAPH_ASSOCSEQ):   run;
 
NOTE: There were 111 observations read from the data set WORK._RULEOUT.
      WHERE (iset1 not = ' ') and (iset2 not = ' ') and (iset1 not = iset2) and (nitems=2) and (conf>=50);
NOTE: The data set EMWS3.LINK_LINKS has 111 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_LINKAN_GETNODESFROMLINKS):   proc sql;
MPRINT(EM_LINKAN_GETNODESFROMLINKS):   create table _node1 as select distinct from as node from EMWS3.Link_LINKS;
NOTE: Table WORK._NODE1 created, with 32 rows and 1 columns.
 
MPRINT(EM_LINKAN_GETNODESFROMLINKS):   create table _node2 as select distinct to as node from EMWS3.Link_LINKS;
NOTE: Table WORK._NODE2 created, with 20 rows and 1 columns.
 
MPRINT(EM_LINKAN_GETNODESFROMLINKS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_LINKAN_GETNODESFROMLINKS):   proc sql;
MPRINT(EM_LINKAN_GETNODESFROMLINKS):   create table _nodes_tmp as select node from _node1 UNION select node from _node2;
NOTE: Table WORK._NODES_TMP created, with 35 rows and 1 columns.
 
MPRINT(EM_LINKAN_GETNODESFROMLINKS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_LINKAN_GETNODESFROMLINKS):   proc sql;
MPRINT(EM_LINKAN_GETNODESFROMLINKS):   create table EMWS3.Link_NODES as select b.* from _nodes_tmp as a LEFT JOIN _nodes as b on a.node = b.node;
NOTE: Table EMWS3.LINK_NODES created, with 35 rows and 2 columns.
 
MPRINT(EM_LINKAN_GETNODESFROMLINKS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.11 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_LINKAN_GETNODESFROMLINKS):   proc datasets lib=work nolist;
MPRINT(EM_LINKAN_GETNODESFROMLINKS):   delete _node1 _node2 _nodes_tmp ;
MPRINT(EM_LINKAN_GETNODESFROMLINKS):   run;
 
NOTE: Deleting WORK._NODE1 (memtype=DATA).
NOTE: Deleting WORK._NODE2 (memtype=DATA).
NOTE: Deleting WORK._NODES_TMP (memtype=DATA).
MPRINT(EM_LINKAN_GETNODESFROMLINKS):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_LINKAN_TRANSTOGRAPH_ASSOCSEQ):  ;
MPRINT(EM_LINKAN_TRANSTOGRAPH_ASSOCSEQ):   proc delete data =aout;
MPRINT(EM_LINKAN_TRANSTOGRAPH_ASSOCSEQ):  run;
 
NOTE: Deleting WORK.AOUT (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_LINKAN_TRANSTOGRAPH_ASSOCSEQ):   proc delete data=_ruleout;
MPRINT(EM_LINKAN_TRANSTOGRAPH_ASSOCSEQ):  run;
 
NOTE: Deleting WORK._RULEOUT (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_LINKAN_TRANSTOGRAPH_ASSOCSEQ):   data EMWS3.Link_RecdRules;
MPRINT(EM_LINKAN_TRANSTOGRAPH_ASSOCSEQ):   set EMWS3.Link_LINKS;
MPRINT(EM_LINKAN_TRANSTOGRAPH_ASSOCSEQ):   rename from=item1;
MPRINT(EM_LINKAN_TRANSTOGRAPH_ASSOCSEQ):   rename to = item2;
MPRINT(EM_LINKAN_TRANSTOGRAPH_ASSOCSEQ):   rename conf=confidence;
MPRINT(EM_LINKAN_TRANSTOGRAPH_ASSOCSEQ):   rename weight= count;
MPRINT(EM_LINKAN_TRANSTOGRAPH_ASSOCSEQ):   rename linkid=RuleID;
MPRINT(EM_LINKAN_TRANSTOGRAPH_ASSOCSEQ):   label to= "Recommended Items";
MPRINT(EM_LINKAN_TRANSTOGRAPH_ASSOCSEQ):   run;
 
NOTE: There were 111 observations read from the data set EMWS3.LINK_LINKS.
NOTE: The data set EMWS3.LINK_RECDRULES has 111 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_LINKANALYSIS_TRAIN):  ;
MPRINT(EM_LINKAN_ANALYZEGRAPH):  ;
MPRINT(EM_LINKAN_ANALYZEGRAPH):  ;
MPRINT(EM_LINKAN_ANALYZEGRAPH):   data EMWS3.Link_LINKS;
MPRINT(EM_LINKAN_ANALYZEGRAPH):   set EMWS3.Link_LINKS;
MPRINT(EM_LINKAN_ANALYZEGRAPH):   weightInv=1.0/weight;
MPRINT(EM_LINKAN_ANALYZEGRAPH):   run;
 
NOTE: There were 111 observations read from the data set EMWS3.LINK_LINKS.
NOTE: The data set EMWS3.LINK_LINKS has 111 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.11 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_LINKAN_ANALYZEGRAPH):   proc optgraph data_nodes = EMWS3.Link_NODES data_links = EMWS3.Link_LINKS graph_direction =directed out_nodes =EMWS3.Link_OUTNODES ;
MPRINT(EM_LINKAN_ANALYZEGRAPH):   centrality degree = both clustering_coef influence = both close = both between = both weight2=weightInv ;
MPRINT(EM_LINKAN_ANALYZEGRAPH):   run;
 
NOTE:
      ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
NOTE: Running OPTGRAPH version 14.1.
NOTE:
      ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
NOTE: The OPTGRAPH procedure is executing in single-machine mode.
NOTE:
      ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
NOTE: Data input used 0.00 (cpu: 0.00) seconds.
NOTE: The number of nodes in the input graph is 35.
NOTE: The number of links in the input graph is 111.
NOTE:
      ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
NOTE: Processing centrality metrics.
NOTE: Processing centrality metrics used 0.02 (cpu: 0.00) seconds.
NOTE:
      ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
NOTE: Data output used 0.02 (cpu: 0.00) seconds.
NOTE:
      ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
NOTE: The data set EMWS3.LINK_OUTNODES has 35 observations and 18 variables.
NOTE: The PROCEDURE OPTGRAPH printed pages 5-7.
NOTE: PROCEDURE OPTGRAPH used (Total process time):
      real time           0.26 seconds
      cpu time            0.10 seconds
 
 
MPRINT(EM_LINKAN_ANALYZEGRAPH):   proc delete data=EMWS3.Link_NODES;
MPRINT(EM_LINKAN_ANALYZEGRAPH):  run;
 
NOTE: Deleting EMWS3.LINK_NODES (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_LINKAN_ANALYZEGRAPH):   data EMWS3.Link_OUTNODES;
MPRINT(EM_LINKAN_ANALYZEGRAPH):   format _group $32.;
MPRINT(EM_LINKAN_ANALYZEGRAPH):   set EMWS3.Link_OUTNODES;
MPRINT(EM_LINKAN_ANALYZEGRAPH):   _group="requested_file";
MPRINT(EM_LINKAN_ANALYZEGRAPH):   *_group_ind=1;
MPRINT(EM_LINKAN_ANALYZEGRAPH):   run;
 
NOTE: There were 35 observations read from the data set EMWS3.LINK_OUTNODES.
NOTE: The data set EMWS3.LINK_OUTNODES has 35 observations and 19 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_LINKAN_ANALYZEGRAPH):   data EMWS3.Link_OUTNODES;
MPRINT(EM_LINKAN_ANALYZEGRAPH):  ;
MPRINT(EM_LINKAN_ANALYZEGRAPH):   set EMWS3.Link_OUTNODES;
MPRINT(EM_LINKAN_ANALYZEGRAPH):   label node= "Node" ;
MPRINT(EM_LINKAN_ANALYZEGRAPH):   label weight= "Weight";
MPRINT(EM_LINKAN_ANALYZEGRAPH):   label _group= "Group";
MPRINT(EM_LINKAN_ANALYZEGRAPH):   label _category= "Original Variable";
MPRINT(EM_LINKAN_ANALYZEGRAPH):   label community_1= "Item-cluster";
MPRINT(EM_LINKAN_ANALYZEGRAPH):   label centr_degree_in= "In-degree Centrality";
MPRINT(EM_LINKAN_ANALYZEGRAPH):   label centr_degree_out= "Out-degree Centrality";
MPRINT(EM_LINKAN_ANALYZEGRAPH):   label centr_degree = "Degree Centrality";
MPRINT(EM_LINKAN_ANALYZEGRAPH):   label centr_close_wt = "Weighted Closeness Centrality";
MPRINT(EM_LINKAN_ANALYZEGRAPH):   label centr_close_in_wt= "Weighted In-Closeness Centrality";
MPRINT(EM_LINKAN_ANALYZEGRAPH):   label centr_close_out_wt= "Weighted Out-Closeness Centrality";
MPRINT(EM_LINKAN_ANALYZEGRAPH):   label centr_close_unwt = "Unweighted Closeness Centrality";
MPRINT(EM_LINKAN_ANALYZEGRAPH):   label centr_close_in_unwt= "Unweighted In-Closeness Centrality";
MPRINT(EM_LINKAN_ANALYZEGRAPH):   label centr_close_out_unwt= "Unweighted Out-Closeness Centrality";
MPRINT(EM_LINKAN_ANALYZEGRAPH):   label centr_between_wt = "Weighted Betweenness Centrality";
MPRINT(EM_LINKAN_ANALYZEGRAPH):   label centr_between_unwt= "Unweighted Betweenness Centrality";
MPRINT(EM_LINKAN_ANALYZEGRAPH):   label centr_influence1_wt = "Weighted Influence1 Centrality";
MPRINT(EM_LINKAN_ANALYZEGRAPH):   label centr_influence1_unwt= "Unweighted Influence1 Centrality";
MPRINT(EM_LINKAN_ANALYZEGRAPH):   label centr_influence2_wt = "Weighted Influence2 Centrality";
MPRINT(EM_LINKAN_ANALYZEGRAPH):   label centr_influence2_unwt= "Unweighted Influence2 Centrality";
MPRINT(EM_LINKAN_ANALYZEGRAPH):   label centr_cluster= "Clustering Coefficient Centrality";
MPRINT(EM_LINKAN_ANALYZEGRAPH):   label centr_eigen_wt = "Weighted Eigenvector Centrality";
MPRINT(EM_LINKAN_ANALYZEGRAPH):   label centr_eigen_unwt= "Unweighted Eigenvector Centrality";
MPRINT(EM_LINKAN_ANALYZEGRAPH):   label centr_auth_wt = "Weighted Authority Centrality";
MPRINT(EM_LINKAN_ANALYZEGRAPH):   label centr_auth_unwt= "Unweighted Authority Centrality";
MPRINT(EM_LINKAN_ANALYZEGRAPH):   label centr_hub_wt = "Weighted Hub Centrality";
MPRINT(EM_LINKAN_ANALYZEGRAPH):   label centr_hub_unwt= "Unweighted Hub Centrality";
MPRINT(EM_LINKAN_ANALYZEGRAPH):   rename community_1=ItemCluster;
MPRINT(EM_LINKAN_ANALYZEGRAPH):   run;
 
NOTE: Variable _category is uninitialized.
NOTE: Variable community_1 is uninitialized.
NOTE: Variable centr_eigen_wt is uninitialized.
NOTE: Variable centr_eigen_unwt is uninitialized.
NOTE: Variable centr_auth_wt is uninitialized.
NOTE: Variable centr_auth_unwt is uninitialized.
NOTE: Variable centr_hub_wt is uninitialized.
NOTE: Variable centr_hub_unwt is uninitialized.
WARNING: The variable community_1 in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 35 observations read from the data set EMWS3.LINK_OUTNODES.
NOTE: The data set EMWS3.LINK_OUTNODES has 35 observations and 19 variables.
NOTE: DATA statement used (Total process time):
      real time           0.18 seconds
      cpu time            0.07 seconds
 
 
MPRINT(EM_LINKAN_ANALYZEGRAPH):  ;
MPRINT(EM_LINKAN_ANALYZEGRAPH):  ;
MPRINT(EM_LINKAN_ANALYZEGRAPH):   proc sql;
MPRINT(EM_LINKAN_ANALYZEGRAPH):   create table EMWS3.Link_CENTMEASURE as select node, centr_degree_out , centr_degree_in , centr_degree , centr_cluster , centr_close_unwt , centr_between_unwt , centr_influence1_unwt , centr_influence2_unwt from
EMWS3.Link_OUTNODES;
NOTE: Table EMWS3.LINK_CENTMEASURE created, with 35 rows and 9 columns.
 
MPRINT(EM_LINKAN_ANALYZEGRAPH):   create table EMWS3.Link_WTDCENTMEASURE as select node, centr_degree_out , centr_degree_in , centr_degree , centr_cluster , centr_close_wt , centr_between_wt , centr_influence1_wt , centr_influence2_wt from
EMWS3.Link_OUTNODES;
NOTE: Table EMWS3.LINK_WTDCENTMEASURE created, with 35 rows and 9 columns.
 
MPRINT(EM_LINKAN_ANALYZEGRAPH):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.21 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_LINKAN_ANALYZEGRAPH):   data EMWS3.Link_LINKS;
MPRINT(EM_LINKAN_ANALYZEGRAPH):   set EMWS3.Link_LINKS;
MPRINT(EM_LINKAN_ANALYZEGRAPH):   drop weightInv;
MPRINT(EM_LINKAN_ANALYZEGRAPH):   run;
 
NOTE: There were 111 observations read from the data set EMWS3.LINK_LINKS.
NOTE: The data set EMWS3.LINK_LINKS has 111 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_LINKANALYSIS_TRAIN):  ;
MPRINT(EM_LINKANALYSIS_MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: Link;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
29686      *------------------------------------------------------------*;
29687      * End TRAIN: Link;
29688      *------------------------------------------------------------*;
 
29689      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
29690      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
29691      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
29692      ;
MPRINT(EM_DIAGRAM):   ;
29693      ;
MPRINT(EM_DIAGRAM):   ;
29694      ;
MPRINT(EM_DIAGRAM):   ;
29695      ;
MPRINT(EM_DIAGRAM):   ;
29696      quit;
MPRINT(EM_DIAGRAM):   quit;
29697      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
29698      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
29699      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
29700      /*; *"; *'; */
29701      ;
MPRINT(EM_DIAGRAM):   ;
29702      run;
MPRINT(EM_DIAGRAM):   run;
29703      quit;
MPRINT(EM_DIAGRAM):   quit;
29704      /* Reset EM Options */
29705      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
29706      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
29707      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 13, 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "10:31:33" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                November 13, 2018
Time:                10:31:33
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O3AZV4_9 "J:\JMMORR01\CIS 445\CIS 445 Tutorial 3\Workspaces\EMWS3\Link\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O3AZV4_9 new;
MPRINT(EM_DIAGRAM):   run;
29809      %let EMEXCEPTIONSTRING=;
29810      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
29811      * SCORE: Link;
MPRINT(EM_DIAGRAM):   * SCORE: Link;
29812      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
29813      %let EM_ACTION = SCORE;
29814      %let syscc = 0;
29815      %MACRO EM_LINKANALYSIS_MAIN;
29816        filename temp catalog 'sashelp.emexpl.link_macros.source';
29817            %include temp;
29818        filename temp;
29819
29820         %if %upcase(&EM_ACTION) = CREATE %then %do;
29821          filename temp catalog 'sashelp.emexpl.link_create.source';
29822            %include temp;
29823          filename temp;
29824          %EM_LINKANALYSIS_CREATE;
29825         %end;
29826
29827         %if %upcase(&EM_ACTION) = TRAIN %then %do;
29828          filename temp catalog 'sashelp.emexpl.link_train.source';
29829             %include temp;
29830            filename temp;
29831          %EM_LINKANALYSIS_TRAIN;
29832        %end;
29833
29834         %if %upcase(&EM_ACTION) = SCORE %then %do;
29835          filename temp catalog 'sashelp.emexpl.link_score.source';
29836          %include temp;
29837          filename temp;
29838          %EM_LINKANALYSIS_SCORE;
29839        %end;
29840
29841         %if %upcase(&EM_ACTION) = REPORT %then %do;
29842          filename temp catalog 'sashelp.emexpl.link_report.source';
29843          %include temp;
29844          filename temp;
29845          %EM_LINKANALYSIS_REPORT;
29846        %end ;
29847      %MEND EM_LINKANALYSIS_MAIN;
29848
29849      %EM_LINKANALYSIS_MAIN;
MPRINT(EM_DIAGRAM):
MPRINT(EM_LINKANALYSIS_MAIN):   filename temp catalog 'sashelp.emexpl.link_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.LINK_MACROS.SOURCE.
29850     +%macro em_linkan_nobs(ds);
29851     +  %let dsID = %sysfunc(open(&ds));
29852     +  %if &dsID %then %do;
29853     +    %let nObs = %sysfunc(attrn(&dsID,nlobsf));
29854     +    %let rc   = %sysfunc(close(&dsID));
29855     +  %end;
29856     +  &nObs
29857     +%mend em_linkan_nobs;
29860     +%macro em_linkan_appendfiles(fileref1, fileref2);/*append fileref2 to fileref1;*/
29861     +     data _null_;
29862     +       length c $256;
29863     +       fid1=fopen("&fileref1",'A');
29864     +       fid2=fopen("&fileref2",'I');
29865     +       cval = finfo(fid2,'lrecl');
29866     +       put cval= fid1= fid2=;
29867     +       if (fid2 > 0) then
29868     +         do while(fread(fid2)=0);
29869     +           rc = fget(fid2,c,256);
29870     +           _msg_=sysmsg();
29871     +           /* put rc= c= _msg_=; */
29872     +           rc = fput(fid1,strip(c));
29873     +           rc = fwrite(fid1);
29874     +         end;
29875     +         _msg_=sysmsg();
29876     +         put _msg_=;
29877     +       rc = fclose(fid1);
29878     +       rc = fclose(fid2);
29879     +     run;
29880     +%mend em_linkan_appendfiles;
29882     +%macro em_linkan_getnodesfromlinks(nodes=,links=,lookupnodes=, samegroup=Y);
29883     +   %if %upcase(&samegroup)= N %then %do;
29884     +        %let idv=%EM_ID;
29885     +        %let target=%EM_TARGET;
29886     +    %end;
29888     +    proc sql;
29889     +          create table _node1 as
29890     +            select distinct from as node %if %upcase(&samegroup)= N %then %do; , "&idv" as _group %end;
29891     +            from &links;
29892     +          create table _node2 as
29893     +            select distinct to as node %if %upcase(&samegroup)= N %then %do; , "&target" as _group %end;
29894     +            from &links;
29895     +    quit;
29897     +   %if %upcase(&samegroup)= Y %then %do;
29898     +    proc sql;
29899     +      create table _nodes_tmp as
29900     +        select node
29901     +        from _node1
29902     +       UNION
29903     +        select node
29904     +        from _node2;
29905     +    quit;
29907     +    proc sql;
29908     +    create table &nodes as
29909     +     select b.*
29910     +      from _nodes_tmp as a
29911     +          LEFT JOIN
29912     +           &lookupnodes as b
29913     +        on a.node = b.node;
29914     +    quit;
29915     +    %end;
29918     +   %if %upcase(&samegroup)= N %then %do;
29919     +    data &nodes;
29920     +          retain node _group _group_ind;
29921     +          format _group $32.;
29922     +          set _node1 _node2;
29923     +          if _group="&idv" then _group_ind=1;
29924     +          if _group="&target" then _group_ind=2;
29925     +    run;
29926     +    %end;
29928     +     proc datasets lib=work nolist;
29929     +         delete _node1 _node2 %if %upcase(&samegroup)= Y %then %do; _nodes_tmp %end;
29930     +         ;
29931     +    run;
29932     +    quit;
29934     +%mend;
29936     +%macro  em_linkan_transpose(data=,
29937     +                            trans=,
29938     +                            binout=,
29939     +                            binnum=,
29940     +                            lookup=
29941     +                            );
29943     +  /*------------------------- Bin interval vars---------------------------- */
29944     +  %if %eval(&EM_NUM_INTERVAL_INPUT+&EM_NUM_INTERVAL_REJECTED+&EM_NUM_INTERVAL_TARGET) > 0  %then %do;
29945     +            /*   Use Binning macro      */
29946     +             %em_getname(key=BINNINGCODE, type=file);
29947     +             %if "&EM_PROPERTY_BINMETHOD"="BUCKET" %then %do;
29948     +                 filename temp1 catalog 'sashelp.emapps.bucket_binning.source';
29949     +             %end;
29951     +             %if "&EM_PROPERTY_BINMETHOD"="QUANTILE" %then %do;
29952     +                 filename temp1 catalog 'sashelp.emapps.quantile_binning.source';
29953     +             %end;
29955     +             %include temp1;
29956     +             filename temp1;
29957     +             filename X "&EM_USER_BINNINGCODE";
29960     +            /* Create a temporary varset, change role to "INPUT" if (role="REJECTED" and use= Y)*/
29961     +            data _tmp_varset;
29962     +                set &EM_DATA_VARIABLESET;
29963     +                if upcase(role) = "REJECTED" and upcase(use) = "Y" and upcase(level) = "INTERVAL"
29964     +                    then role = "INPUT";
29965     +            run;
29968     +             %if "&EM_PROPERTY_BINMETHOD"="BUCKET" %then %do;
29969     +                %em_apps_bucket_binning(&EM_IMPORT_DATA, _tmp_varset, &binnum, &EM_USER_BINMAPPINGS, %str(X) , dropOriginal=N, IncludeTarget=Y);
29970     +             %end;
29971     +             %if "&EM_PROPERTY_BINMETHOD"="QUANTILE" %then %do;
29972     +                %em_apps_quantile_binning(&EM_IMPORT_DATA, _tmp_varset, &binnum, &EM_USER_BINMAPPINGS, %str(X) , dropOriginal=N, IncludeTarget=Y);
29973     +             %end;
29975     +            /*Get binned data */
29976     +             data &binout; /*will keep all original data*/
29977     +                  set &data(keep = %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT  %EM_INTERVAL_INPUT
29978     +                       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED  %EM_INTERVAL_REJECTED
29979     +                       %EM_TARGET) ;
29980     +                  %inc X;
29981     +              run;
29984     +              proc print data=&binout;run;
29985     +             filename X;
29986     +  %end;
29987     +  %else %do;             /*No interval vars */
29988     +            data &binout;
29989     +                 set &data(keep = %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
29990     +                       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
29991     +                       %EM_TARGET) ;
29992     +           run;
29993     +  %end;
29995     +  proc contents data = &binout(drop=%EM_INTERVAL_INPUT   %EM_INTERVAL_REJECTED  %EM_INTERVAL_TARGET) out = varsdata(keep =  name) noprint;
29996     +  run;
29998     +  proc sql noprint;
29999     +      select count(*) into :_numvars from varsdata;
30000     +      select name into :var1-:var%left(&_numvars) from varsdata order by name;
30001     +  quit;
30005     +/*Create Transactional data from binout */
30006     +  data &trans.;
30007     +      set &binout(drop=%EM_INTERVAL_INPUT   %EM_INTERVAL_REJECTED  %EM_INTERVAL_TARGET);
30008     +      format  tmpstr $100. item $100. level $100. _category $32.;
30009     +      drop tmpstr;
30010     +        %do i = 1 %to &_numvars ;
30011     +            newid=_N_;            /*Customer Id */
30012     +            tmpstr=cats(&&&&var&i);
30013     +            if tmpstr eq ' '    /*If variable has a missing level*/
30014     +            then do;
30015     +                 item = catx('_',SYMGET('var'||LEFT(&i)),'.');
30016     +                 level='.';
30017     +            end;
30018     +            else do;
30019     +                 item = catx('_',SYMGET('var'||LEFT(&i)),&&&&var&i);
30020     +                 level=tmpstr;
30021     +            end;
30022     +          _category=  "&&var&i." ;/*Original Var info*/
30023     +         * _category_ind= &i;
30024     +          output ;
30025     +        %end;
30026     +       keep newid item level _category;
30027     +  run;
30029     +  proc sql;
30030     +      create table &lookup as
30031     +      select distinct Item, level, _category, "%sysfunc(sasmsg(sashelp.dmine,lnka_level_valuelabel, noquote))" as _group
30032     +       from &trans;
30033     +  quit;
30037     +  /*--- delete binout ----*/
30038     +  proc delete data= &binout;run;
30039     +  proc delete data= varsdata ;run;
30041     +%mend em_linkan_transpose;
30044     +%macro em_linkan_TransAsNodesLinks(indata = ,
30045     +                                    idv=,
30046     +                                    target=,
30047     +                                    freq=,
30048     +                                    outnodes=,
30049     +                                    outlinks=
30050     +                                    );             /*Explore Transactional Data: User(From)->Product(To)*/
30052     +  /*idv: customer; target: target*/
30053     +  data &outlinks;
30054     +      set &indata;
30055     +      format from $100. to $100.;
30056     +      from = cats(&idv);
30057     +      to  = cats(&target);
30058     +      drop &idv &target;
30059     +      %if &freq eq %then %do;
30060     +      weight=1;
30061     +      %end;
30062     +        %if &freq ne %then %do;
30063     +            rename &freq=weight ;
30064     +        %end;
30065     +      linkid=_N_;
30066     +  run;
30068     +   proc sql noprint;
30069     +       select count(*) into: translinkrows
30070     +       from &outlinks;
30071     +   quit;
30073     +  %if &translinkrows>10000 %then %do;/*exception handling for links data that exceeds the row download limit of 20k */
30074     +       /*Keep only top 10k rows of links data*/
30075     +      data &outlinks;
30076     +         set &outlinks(obs=10000);
30077     +      run;
30078     +  %end;
30080     +  %em_linkan_getnodesfromlinks(nodes=&outnodes,links=&outlinks,lookupnodes=, samegroup=N);
30081     +/*
30082     +  data &outlinks;
30083     +   set &outlinks;
30084     +   rename from=&idv to=&target;
30085     +  run;*/
30087     +%mend  em_linkan_TransAsNodesLinks;
30090     +%macro em_linkan_TransToGraph_AssocSeq(indata =,
30091     +                                       nodes=,
30092     +                                       links=,
30093     +                                       same=,
30094     +                                       window=,
30095     +                                       idv=,
30096     +                                       target=,
30097     +                                       seq=,
30098     +                                       seqsuptype=,
30099     +                                       seqsupport=,
30100     +                                       assocsuptype=,
30101     +                                       assocsupport=
30102     +                                      );
30104     +       %em_getname(key=SORTEDTRANS, type=data);
30105     +       %em_getname(key=TRANSACTION, type=data);
30106     +       %em_getname(key=RecdRules, type=data);
30109     +       proc sort data=&indata out=&EM_USER_SORTEDTRANS;
30110     +            by &idv;
30111     +       run;
30113     +       data &EM_USER_SORTEDTRANS;        /*need to make sure targret is char*/
30114     +            set  &EM_USER_SORTEDTRANS;
30115     +            chartarget=cats(&target);
30116     +            drop &target;
30117     +            rename chartarget=&target;
30118     +       run;
30120     +       proc dmdb batch data=&EM_USER_SORTEDTRANS dmdbcat=cat;
30121     +            id &idv &seq;
30122     +            class &target(desc);
30123     +       run;
30126     +       /*--- If there is no sequence var in transactional data, or raw/train data ----*/
30128     +       %if (&seq. eq ) or ("&indata"="&EM_USER_TRANSACTION") %then %do;
30130     +            proc assoc data=&EM_USER_SORTEDTRANS dmdbcat=cat out=aout items=2
30131     +                        %if "&assocsuptype"="PERCENT" %then %do;
30132     +                        pctsup=&assocsupport
30133     +                        %end;
30134     +                        %if "&assocsuptype"="COUNT" %then %do;
30135     +                        support =&assocsupport
30136     +                        %end;
30137     +                ;
30138     +                cust &idv ;
30139     +                target &target;
30140     +            run;
30144     +             /*obs 2 to &nodeobs: one item set; &nodeobs+1 to &linkobs: two items set*/
30145     +            proc sql noprint;
30146     +                  select count(*) into :nodeobs from aout
30147     +                  where item2 is missing;
30148     +                  select count(*) into :linkobs from aout
30149     +                 ;
30150     +            quit;
30152     +            %let linkfirobs=%eval(&nodeobs.+1);
30154     +             /*------ Exception string : check if two item sets exist at current support level ----*/
30155     +            %if &linkobs. le &linkfirobs. %then %do;
30156     +                  %let EMEXCEPTIONSTRING = exception.server.lnka.resetsupportlevelerr;
30157     +                  %put &em_codebar;
30158     +                  %let errormsg = %sysfunc(sasmsg(sashelp.dmine, lnka.resetsupportlevel_err, noquote));
30159     +                  %put &errormsg;
30160     +                  %put &em_codebar;
30161     +                  %let errorflag=&errorflag+1;
30162     +                  %return;
30163     +            %end;
30165     +            proc rulegen in=aout out=_ruleout(where =(set_size=2)) minconf=&EM_PROPERTY_MINCONF;
30166     +            run;
30168     +            /*------ Exception string : check nobs at _ruleout , if no obs, need to reset confidence level  ----*/
30170     +            %if %em_linkan_nobs(_ruleout) = 0 %then %do;
30171     +                  %let EMEXCEPTIONSTRING = exception.server.lnka.resetconflevelerr;
30172     +                  %put &em_codebar;
30173     +                  %let errormsg = %sysfunc(sasmsg(sashelp.dmine, lnka.resetconflevel_err, noquote));
30174     +                  %put &errormsg;
30175     +                  %put &em_codebar;
30176     +                  %let errorflag=&errorflag+1;
30177     +                  %return;
30178     +            %end;
30180     +           /*Get undirected graph*/
30181     +            data  _nodes;
30182     +                  set aout(firstobs=2 obs=&nodeobs);
30183     +                  rename item1= node  count=weight;
30184     +                  keep item1 count;
30185     +            run;
30188     +            data &links;
30189     +                 set _ruleout;
30190     +                 where (_LHAND ne ' ') and (_RHAND ne ' ') and (_LHAND ne _RHAND) and (set_size=2);
30191     +                 rename  _LHAND=from ;
30192     +                 rename  _RHAND=to;
30193     +                 rename  count=weight;
30194     +                 linkid = _N_;
30195     +                 drop item1 item2 item3;   /*need to drop them or there will be confusion when renaming "from" to "item1, "to" to "item2" in RecdRules*/
30196     +            run;
30198     +       %end;      /*-- end of  %if (&seq. eq ) or ("&indata"="&EM_USER_TRANSACTION") %then %do; -------*/
30199     +       %else %do;
30200     +            /*-- If there is sequence var, note that relatioinal data does not process seq var --*/
30202     +            /*get directed graph*/
30204     +            proc assoc data=&EM_USER_SORTEDTRANS dmdbcat=cat out=aout items=1
30205     +                  %if "&assocsuptype"="PERCENT" %then %do;
30206     +                        pctsup=&assocsupport
30207     +                   %end;
30208     +                   %if "&assocsuptype"="COUNT" %then %do;
30209     +                        support =&assocsupport
30210     +                   %end;
30211     +                ;                                                                                                                                                               ;
30212     +                 cust &idv ;
30213     +                 target &target;
30214     +            run;
30216     +            proc sequence data=&EM_USER_SORTEDTRANS dmdbcat=cat assoc=aout out=_ruleout nitems=2
30217     +                   %if "&seqsuptype"="PERCENT" %then %do;
30218     +                        pctsup=&seqsupport
30219     +                    %end;
30220     +                    %if "&seqsuptype"="COUNT" %then %do;
30221     +                        support =&seqsupport
30222     +                    %end;
30223     +                 ;
30224     +                 cust &idv ;
30225     +                 target &target;
30226     +                 visit  &seq /
30227     +                 %if &same ne . %then %do;
30228     +                              same=&same
30229     +                 %end;
30230     +                 %if &window ne . %then %do;
30231     +                              window=&window
30232     +                 %end;
30233     +                  ;
30234     +            run;
30236     +             /*------ Exception string  :  check nobs at _ruleout , if no obs, need to reset support level    ----*/
30237     +            %if %em_linkan_nobs(_ruleout)=0 %then %do;
30238     +                  %let EMEXCEPTIONSTRING = exception.server.lnka.resetsupportlevelerr;
30239     +                  %put &em_codebar;
30240     +                  %let errormsg = %sysfunc(sasmsg(sashelp.dmine, lnka.resetsupportlevel_err, noquote));
30241     +                  %put &errormsg;
30242     +                  %put &em_codebar;
30243     +                  %let errorflag=&errorflag+1;
30244     +                  %return;
30245     +            %end;
30247     +            data _nodes;
30248     +                 set aout;
30249     +                 if _N_ = 1 then delete;
30250     +                 keep item1 count ;
30251     +                 rename item1=node count=weight;
30252     +            run;
30254     +            data &links;
30255     +                 set _ruleout;
30256     +                 where (iset1 ne ' ') and (iset2 ne ' ') and (iset1 ne iset2) and (nitems=2) and (conf>=&EM_PROPERTY_MINCONF);
30257     +                 rename iset1= from;
30258     +                 rename iset2=to;
30259     +                 rename  count=weight;
30260     +                 linkid=_N_;
30261     +            run;
30263     +               /*------ Exception string  :  check nobs at &linkd, if no obs, need to reset confidence level    ----*/
30264     +            %if %em_linkan_nobs(&links)=0 %then %do;
30265     +                  %let EMEXCEPTIONSTRING = exception.server.lnka.resetconflevelerr;
30266     +                  %put &em_codebar;
30267     +                  %let errormsg = %sysfunc(sasmsg(sashelp.dmine, lnka.resetconflevel_err, noquote));
30268     +                  %put &errormsg;
30269     +                  %put &em_codebar;
30270     +                  %let errorflag=&errorflag+1;
30271     +                  %return;
30272     +            %end;
30274     +       %end;
30275     +       /*Get distinct nodes from links and look up weight from _nodes*/
30276     +       %em_linkan_getnodesfromlinks(nodes=&nodes, links=&links, lookupnodes=_nodes);
30278     +       proc delete data =aout;run;
30279     +       proc delete data=_ruleout;run;
30282     +    /*-------- create Recommend Rules ---------------------*/
30284     +    data &EM_USER_RECDRULES;
30285     +        set &links;
30286     +        rename from=item1;
30287     +        rename to = item2;
30288     +        rename conf=confidence;
30289     +        rename weight= count;
30290     +        rename linkid=RuleID;
30291     +        label   to= "%sysfunc(sasmsg(sashelp.dmine, lnka_recommendeditems_vlabel , noquote))";
30292     +    run;
30294     +%mend em_linkan_TransToGraph_AssocSeq;
30296     +%macro em_linkan_recommend(intrans=, ar=, outtrans=);
30297     +/*intrans: transaction data;
30298     +  ar=association rule, i.e.,&EM_USER_RECDRULES;
30299     +  outtrans=output recommendation table;*/
30301     +  *get the recommended items;
30302     +  *assuming the length of inferences is limit to one association rule;
30303     +  %let id=%EM_ID;
30304     +  %let target=%EM_TARGET;
30305     +  proc sql;
30306     +      create table tmp1 as
30307     +      select a.&id, b.item2 as &target, sum(b.count*b.confidence)/sum(b.count) as confidence
30308     +      from &intrans a, &ar b
30309     +      where a.&target = b.item1
30310     +      group by a.&id, b.item2
30311     +      order by a.&id, confidence desc
30312     +      ;
30313     +  quit;
30315     +  proc sql noprint;
30316     +      create table tmp2 as
30317     +      select tmp1.&id, tmp1.&target
30318     +      from tmp1
30319     +      except
30320     +      select c.&id, c.&target
30321     +      from &intrans c
30322     +      ;
30323     +      create table _outtrans as
30324     +      select a.*, b.confidence
30325     +      from tmp2 a, tmp1 b
30326     +      where a.&id=b.&id and a.&target=b.&target
30327     +      order by a.&id, confidence desc
30328     +      ;
30329     +  quit;
30331     +  data &outtrans;
30332     +      set _outtrans;
30333     +      by &id; retain rank 0;
30334     +      if first.&id then rank=1;
30335     +      else rank+1;
30336     +      label   confidence= "%sysfunc(sasmsg(sashelp.dmine, lnka_confidence_vlabel , noquote))";
30337     +      label   rank= "%sysfunc(sasmsg(sashelp.dmine, lnka_rank_vlabel , noquote))";
30338     +      label   &id="%sysfunc(sasmsg(sashelp.dmine, lnka_idv_vlabel , noquote))";
30339     +  run;
30341     +  proc datasets lib=work nolist;
30342     +     delete tmp1 tmp2 _outtrans;
30343     +  run;
30344     +%mend em_linkan_recommend;
30347     +%macro em_linkan_getoverlap2_rela(trans=,overlap=,overlap2=);    /*for relational data*/
30349     +%let tarname=%EM_TARGET;
30351     +proc sql;
30352     +  create table trans2 as
30353     +  select  distinct item, level, _category as varname
30354     +  from &trans;
30355     +quit;
30357     +/*remove target's contribution for scoring:strip(trans2.varname) ne "&tarname"*/
30358     +proc sql;
30359     +  create table _overlap2 as
30360     +  select b.node, trans2.varname, trans2.level,b.ItemCluster as ItemCluster, b.intensity
30361     +  from trans2,&overlap as b
30362     +  where trans2.item=b.node and strip(trans2.varname) ne "&tarname";
30364     +  create table &overlap2 as
30365     +  select d.*, c.FORMAT, c.TYPE,c.LENGTH
30366     +   from
30367     +     _overlap2 as d
30368     +  left join
30369     +     &EM_IMPORT_DATA_CMETA as c
30370     +  on d.varname=c.NAME
30371     +  order by d.node, d.ItemCluster;
30372     +quit;
30374     +data &overlap2;
30375     +    set &overlap2;
30376     +    if strip(format) eq '$' then format = ' ';
30377     +    if missing(format) then do;
30378     +       if type eq '' then format='best32.';
30379     +        else if type eq 'N'
30380     +            then format=cats('best',length,'.');
30381     +            else format=cats('$',length,'.');
30382     +    end;
30383     +    else do;
30384     +    if index(format,'.') le 0
30385     +           then format=cats(format,'.');
30386     +    end;
30387     +    if upcase(format) eq  'BEST.'
30388     +           then format='best32.';
30389     +    drop length type;
30390     +run;
30392     +proc datasets lib=work nolist;
30393     +  delete trans2 _overlap2;
30394     +run;
30396     +%mend em_linkan_getoverlap2_rela;
30398     +%macro em_linkan_getoverlap2_trans(overlap=,overlap2=,target=);    /*for transactional data*/
30401     +proc sql;
30402     +  create table &overlap2(drop=_tmpnode_) as
30403     +  select tranwrd( _tmpnode_,"'","''") as node, *, "&target" as varname
30404     +  from &overlap(rename=(node=_tmpnode_));
30405     +quit;
30407     +%mend em_linkan_getoverlap2_trans;
30411     +/*-----------------------------------------------------------------------------------
30413     +     Call proc optgraph to get Centrality Measure and Community Info(Undirected Graph Only)
30415     +------------------------------------------------------------------------------------*/
30418     +%macro em_linkan_AnalyzeGraph(outnodes =,
30419     +                              clustering_coef =,
30420     +                              influence = ,
30421     +                              close =,
30422     +                              between =  ,
30423     +                              eigen = ,
30424     +                              eigen_algorithm = ,
30425     +                              eigen_maxiter = ,
30426     +                              hub = ,
30427     +                              auth = ,
30428     +                              seq=,
30429     +                              max_comm_size=,
30430     +                              max_diameter=,
30431     +                              relation= ,
30432     +                              commalgorithm = ,
30433     +                              link_removal_ratio = ,
30434     +                              max_iterations = ,
30435     +                              modularity = ,
30436     +                              resolution_list =
30437     +                              );
30439     +   %if &seq. eq %then %do;
30440     +       %EM_GETNAME(KEY=COMMNODE, TYPE=DATA);
30441     +       %EM_GETNAME(KEY=COMMLINK, TYPE=DATA);
30442     +       %EM_GETNAME(KEY=COMMOVERLAP, TYPE=DATA);
30443     +       %EM_GETNAME(KEY=COMMLEVEL, TYPE=DATA);
30444     +   %end;
30445     +   %EM_GETNAME(KEY=NODES, TYPE=DATA);
30446     +   %EM_GETNAME(KEY=LINKS, TYPE=DATA);
30448     +   data &EM_USER_LINKS;
30449     +       set &EM_USER_LINKS;
30450     +       weightInv=1.0/weight;
30451     +   run;
30453     +   proc optgraph
30454     +       data_nodes = &EM_USER_NODES
30455     +       data_links = &EM_USER_LINKS
30456     +    %if &seq. eq %then %do;
30457     +       graph_direction =undirected
30458     +    %end;
30459     +    %else %do;
30460     +       graph_direction =directed
30461     +    %end;
30463     +    %if &transaction_data_indicator=0 %then %do;  /*relational data*/
30464     +       out_nodes = _outnodes;
30465     +    %end;
30466     +    %else %do;
30467     +       out_nodes =&outnodes ;
30468     +    %end;
30470     +       centrality
30471     +       %if &seq. eq %then %do;
30472     +                 degree = out
30473     +               %if "&eigen"="Y" %then %do;
30474     +                 eigen = both
30475     +               eigen_algorithm =&eigen_algorithm
30476     +               eigen_maxiter = &eigen_maxiter
30477     +               %end;
30478     +       %end;
30479     +       %else %do;
30480     +                 degree = both
30481     +                %if "&hub"="Y" %then %do;
30482     +                 hub=both
30483     +                %end;
30484     +                %if "&auth"="Y" %then %do;
30485     +                 auth=both
30486     +                %end;
30487     +                %if "&hub"="Y" or "&auth"="Y" %then %do;
30488     +                 eigen_algorithm =&eigen_algorithm
30489     +                 eigen_maxiter = &eigen_maxiter
30490     +                %end;
30491     +       %end;
30492     +        %if "&clustering_coef"="Y" %then %do;
30493     +                 clustering_coef
30494     +        %end;
30495     +        %if "&influence"="Y" %then %do;
30496     +               influence = both
30497     +        %end;
30498     +        %if "&close"="Y" %then %do;
30499     +                close =   both
30500     +        %end;
30501     +        %if "&between"="Y" %then %do;
30502     +                between = both
30503     +        %end;
30504     +        %if "&close"="Y" or "&between"="Y"  %then %do;
30505     +               weight2=weightInv
30506     +        %end;
30507     +      ;
30509     +       %if &seq. eq %then %do;  /*relational or transactional with no seq*/
30510     +       community
30511     +                algorithm =  &commalgorithm
30512     +                link_removal_ratio =&link_removal_ratio
30513     +                maxiter =  &max_iterations
30514     +                modularity = &modularity
30515     +                resolution_list =  &resolution_list
30516     +              /*  recursive (max_comm_size=&max_comm_size. max_diameter=&max_diameter. relation=&relation.)    */
30517     +                out_comm_links=&EM_USER_COMMLINK
30518     +                out_community=&EM_USER_COMMNODE
30519     +                out_level=&EM_USER_COMMLEVEL
30520     +                out_overlap=&EM_USER_COMMOVERLAP
30521     +       ;
30522     +       %end;
30523     +   run;
30525     +   proc delete data=&EM_USER_NODES;run;
30527     +   /*Change Community Data, map community 0-N to 1-N+1*/
30528     +   %if &seq. eq %then %do;
30530     +       data &EM_USER_COMMLINK;
30531     +             format from_community_id $100. to_community_id $100.;
30532     +             label  from_community_id="%sysfunc(sasmsg(sashelp.dmine,lnka_from_community_id_vlabel, noquote))" ;
30533     +             label  to_community_id="%sysfunc(sasmsg(sashelp.dmine,lnka_to_community_id_vlabel, noquote))" ;
30534     +             label link_weight ="%sysfunc(sasmsg(sashelp.dmine, lnka_weight_vlabel, noquote))" ;
30535     +             label linkid ="%sysfunc(sasmsg(sashelp.dmine, lnka_linkid_vlabel, noquote))" ;
30536     +             set &EM_USER_COMMLINK;
30537     +             from_community = from_community+1;
30538     +             to_community   = to_community+1;
30539     +             from_community_id = cats(from_community);
30540     +             to_community_id   = cats(to_community);
30541     +             linkid=_N_;
30542     +             rename from_community_id =from_ItemClusterID to_community_id =to_ItemClusterID;
30543     +             drop level resolution from_community to_community;
30544     +       run;
30546     +       data &EM_USER_COMMNODE;
30547     +             format community_id $100.;
30548     +             label  community_id="%sysfunc(sasmsg(sashelp.dmine,lnka_community_id_vlabel, noquote))" ;
30549     +             label  community="%sysfunc(sasmsg(sashelp.dmine,lnka_community_1_vlabel, noquote))" ;
30550     +             label  nodes="%sysfunc(sasmsg(sashelp.dmine,lnka_nodes_vlabel, noquote))" ;
30551     +             set &EM_USER_COMMNODE;
30552     +             community = community+1;
30553     +             community_id   = cats(community);
30554     +             rename community=ItemCluster community_id=ItemClusterID;
30555     +             drop level resolution;
30556     +       run;
30558     +       data &EM_USER_COMMOVERLAP;
30559     +             format community_id $100.;
30560     +             label  community_id="%sysfunc(sasmsg(sashelp.dmine,lnka_community_id_vlabel, noquote))" ;
30561     +             label  community="%sysfunc(sasmsg(sashelp.dmine,lnka_community_1_vlabel, noquote))" ;
30562     +             label node ="%sysfunc(sasmsg(sashelp.dmine, lnka_node_vlabel, noquote))" ;
30563     +             label intensity ="%sysfunc(sasmsg(sashelp.dmine, lnka_intensity_vlabel, noquote))" ;
30564     +             label community ="%sysfunc(sasmsg(sashelp.dmine, lnka_community_1_vlabel, noquote))" ;
30565     +             label linkid ="%sysfunc(sasmsg(sashelp.dmine, lnka_linkid_vlabel, noquote))" ;
30566     +             set &EM_USER_COMMOVERLAP;
30567     +             community = community+1;
30568     +             community_id   = cats(community);
30569     +             linkid=_N_;
30570     +             rename community_id=ItemClusterID community=ItemCluster;
30571     +       run;
30574     +   %end;
30576     +   /*---- add group info: which var item is from, Only relational data has LOOKUP table**/
30578     +   %if &transaction_data_indicator=0 %then %do;
30579     +      proc sql;
30580     +           create table  &OUTNODES as
30581     +                  select  *
30582     +                  from _outnodes as A, &EM_USER_LOOKUP as B
30583     +                  where  A.node=B.Item;
30584     +           alter table  &OUTNODES  drop item;
30585     +      quit;
30586     +      proc delete data=_outnodes;run;
30587     +      proc delete data=&EM_USER_LOOKUP;
30589     +   %end;
30590     +   %else %do;/*For transactional data, add group info*/
30591     +       %let target=%EM_TARGET;
30592     +        data &EM_USER_OUTNODES;
30593     +        format _group $32.;
30594     +             set &EM_USER_OUTNODES;
30595     +        _group="&target";
30596     +        *_group_ind=1;/*don't need it for color*/
30597     +        run;
30599     +   %end;
30601     +   %if &seq. eq %then %do;
30602     +      data &OUTNODES;
30603     +           format community_id $100.;
30604     +           label  community_id="%sysfunc(sasmsg(sashelp.dmine,lnka_community_id_vlabel, noquote))" ;
30605     +           set &OUTNODES;
30606     +           community_1=community_1+1;
30607     +           community_id=cats(community_1);
30608     +           rename community_id=ItemClusterID;
30609     +    run;
30610     +   %end;
30611     +   data &OUTNODES;;
30612     +     set &OUTNODES;
30613     +     %if &transaction_data_indicator=0 %then %do;
30614     +     drop level;
30615     +     %end;
30616     +           label  node="%sysfunc(sasmsg(sashelp.dmine, lnka_node_vlabel, noquote))" ;
30617     +           label  weight="%sysfunc(sasmsg(sashelp.dmine, lnka_weight_vlabel, noquote))";
30618     +           label  _group= "%sysfunc(sasmsg(sashelp.dmine, lnka_group_vlabel, noquote))";
30619     +           label  _category= "%sysfunc(sasmsg(sashelp.dmine, lnka_category_vlabel, noquote))";
30620     +           label  community_1= "%sysfunc(sasmsg(sashelp.dmine, lnka_community_1_vlabel, noquote))";
30621     +           label  centr_degree_in= "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_degree_in_vlabel, noquote))";
30622     +           label  centr_degree_out= "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_degree_out_vlabel, noquote))";
30623     +           label  centr_degree = "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_degree_vlabel, noquote))";
30624     +           label  centr_close_wt = "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_close_wt_vlabel, noquote))";
30625     +           label  centr_close_in_wt= "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_close_in_wt_vlabel, noquote))";
30626     +           label  centr_close_out_wt= "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_close_out_wt_vlabel, noquote))";
30627     +           label  centr_close_unwt = "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_close_unwt_vlabel, noquote))";
30628     +           label  centr_close_in_unwt= "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_close_in_unwt_vlabel, noquote))";
30629     +           label  centr_close_out_unwt= "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_close_out_unwt_vlabel, noquote))";
30630     +           label  centr_between_wt = "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_between_wt_vlabel, noquote))";
30631     +           label  centr_between_unwt= "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_between_unwt_vlabel, noquote))";
30632     +           label  centr_influence1_wt = "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_influence1_wt_vlabel, noquote))";
30633     +           label  centr_influence1_unwt= "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_influence1_unwt_vlabel, noquote))";
30634     +           label  centr_influence2_wt = "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_influence2_wt_vlabel, noquote))";
30635     +           label  centr_influence2_unwt= "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_influence2_unwt_vlabel, noquote))";
30636     +           label  centr_cluster= "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_cluster_vlabel, noquote))";
30637     +           label  centr_eigen_wt = "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_eigen_wt_vlabel, noquote))";
30638     +           label  centr_eigen_unwt= "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_eigen_unwt_vlabel, noquote))";
30639     +           label  centr_auth_wt = "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_auth_wt_vlabel, noquote))";
30640     +           label  centr_auth_unwt= "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_auth_unwt_vlabel, noquote))";
30641     +           label  centr_hub_wt = "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_hub_wt_vlabel, noquote))";
30642     +           label  centr_hub_unwt= "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_hub_unwt_vlabel, noquote))";
30643     +           rename community_1=ItemCluster;
30644     +  run;
30646     +   %em_getname(key=CENTMEASURE, type=data);
30647     +   %em_getname(key=WTDCENTMEASURE, type=data);
30648     +   /*Seperate &outnodes to two tables: Unweighted Centrality Measure Table and Weighted Centrality Measure Table for bar chart output*/
30649     +   proc sql;
30650     +      create table &EM_USER_CENTMEASURE as
30651     +            select node, centr_degree_out
30652     +            %if &seq. ne  %then %do;
30653     +                , centr_degree_in ,  centr_degree
30654     +                %if "&hub"="Y" %then %do;
30655     +                  , centr_hub_unwt
30656     +                %end;
30657     +                %if "&auth"="Y" %then %do;
30658     +                  , centr_auth_unwt
30659     +                %end;
30660     +            %end;
30661     +            %else %do;
30662     +                %if "&eigen"="Y" %then %do;
30663     +                , centr_eigen_unwt
30664     +               %end;
30665     +            %end;
30666     +            %if "&clustering_coef"="Y" %then %do;
30667     +                 , centr_cluster
30668     +             %end;
30669     +             %if "&close"="Y" %then %do;
30670     +                   , centr_close_unwt
30671     +             %end;
30672     +             %if "&between"="Y" %then %do;
30673     +                   , centr_between_unwt
30674     +             %end;
30675     +             %if "&influence"="Y" %then %do;
30676     +                  , centr_influence1_unwt
30677     +                  , centr_influence2_unwt
30678     +             %end;
30679     +            from &outnodes;
30681     +      create table &EM_USER_WTDCENTMEASURE as
30682     +            select node, centr_degree_out
30683     +            %if &seq. ne  %then %do;
30684     +                , centr_degree_in ,  centr_degree
30685     +                %if "&hub"="Y" %then %do;
30686     +                 , centr_hub_wt
30687     +                %end;
30688     +                %if "&auth"="Y" %then %do;
30689     +                  , centr_auth_wt
30690     +                %end;
30691     +            %end;
30692     +            %else %do;
30693     +                %if "&eigen"="Y" %then %do;
30694     +                , centr_eigen_wt
30695     +               %end;
30696     +            %end;
30697     +            %if "&clustering_coef"="Y" %then %do;
30698     +                 , centr_cluster
30699     +             %end;
30700     +             %if "&close"="Y" %then %do;
30701     +                  , centr_close_wt
30702     +             %end;
30703     +             %if "&between"="Y" %then %do;
30704     +                  , centr_between_wt
30705     +             %end;
30706     +             %if "&influence"="Y" %then %do;
30707     +                  , centr_influence1_wt
30708     +                  , centr_influence2_wt
30709     +             %end;
30710     +            from &outnodes;
30711     +   quit;
30714     +data &EM_USER_LINKS;
30715     +set &EM_USER_LINKS;
30716     +drop weightInv;
30717     +run;
30719     +%mend em_linkan_AnalyzeGraph;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_LINKANALYSIS_MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_LINKANALYSIS_MAIN):   filename temp catalog 'sashelp.emexpl.link_score.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.LINK_SCORE.SOURCE.
30722     +%MACRO EM_LINKANALYSIS_SCORE;
30723     + %let em_lnka_transdata_indicator=0;
30724     + %if "&EM_IMPORT_TRANSACTION" ne "" and (%sysfunc(exist(&EM_IMPORT_TRANSACTION)) or %sysfunc(exist(&EM_IMPORT_TRANSACTION, view))) %then %do;
30725     +      %let  em_lnka_transdata_indicator=1;
30726     + %end;
30729     + /*----------------------------Transactional Data, Recommendation=Y-------------------------------------------------*/
30730     + /*Generate Recommendation Table and RecdRules only for transactional data*/
30732     + %if (&em_lnka_transdata_indicator=1) and (&EM_PROPERTY_RecommendInd=Y) %then %do;
30733     +    %em_getname(key=Recommend, type=data);
30734     +    %em_getname(key=RecdRules, type=data);
30735     +    %em_getname(key=SortedTrans, type=data);
30736     +    %em_getname(key=RECOMMENDFIltered, type=data);
30738     +    /*Get full recommendation table:&EM_USER_Recommend*/
30739     +    %em_linkan_recommend(intrans=&EM_USER_SortedTrans, ar=&EM_USER_RecdRules, outtrans=&EM_USER_Recommend);
30742     +     /*-----------  Filtered Recommendation Table: autodisplay=Y, criteria: Top N or Minimum Confidence -----------*/
30744     +     data &EM_user_RECOMMENDFILTERED;
30745     +              set &EM_user_RECOMMEND;
30746     +              where (rank le &EM_PROPERTY_TOPN)       /* write only top N for each customer to output data set */
30747     +              %if "&EM_PROPERTY_CRITOPERATOR" eq "OR" %then %do;
30748     +                  or
30749     +              %end;
30750     +              %else %do;
30751     +                  and
30752     +              %end;
30753     +              %if &EM_PROPERTY_CONFFILTER ne . %then %do;
30754     +                 (confidence>=&EM_PROPERTY_CONFFILTER)
30755     +              %end;
30756     +              %else %do;
30757     +                 (confidence>=&EM_PROPERTY_MINCONF)
30758     +              %end;
30759     +              ;
30760     +     run;
30762     +     /*------------  Generate Publish Score Code ------------------*/
30764     +     %let indata = %str(&)%str(EM_SCORE_OUTPUT);
30765     +     %let emid=%EM_ID;
30766     +     %let target=%EM_TARGET;
30767     +     %let outdata=_tmpout ;
30768     +     %let ruledata = ruledata;
30770     +     filename _F1 catalog 'sashelp.emutil.em_data2code.source';
30771     +        %inc _F1;
30772     +     filename _F1;
30774     +     filename _F1 "&EM_FILE_EMPUBLISHSCORECODE";
30775     +     %if %sysfunc(fexist(_F1)) eq 1 %then %do;
30776     +      %let rc = %sysfunc(fdelete(_F1));
30777     +     %end;
30778     +     data _null_;
30779     +        file _F1 mod;
30780     +        put "&em_codebar;";
30781     +        put "* LA: Score Code for Transactional Data, Rec=Y;";
30782     +        put "* To run this score code as stand alone uncomment the code below and set the LADATA and EM_SCORE_OUTPUT macro variables;";
30783     +        put '* %let EM_SCORE_OUTPUT=;';
30784     +        put '* %let LADATA =;';
30785     +        put '* data &EM_SCORE_OUTPUT;';
30786     +        put '*   set &LADATA;';
30787     +        put "* run;";
30788     +        put "&em_codebar;";
30789     +     run;
30790     +     %em_data2code(data=&EM_USER_RECDRULES, outdata=&ruledata, outfile=&EM_FILE_EMPUBLISHSCORECODE, APPEND=Y);
30792     +     data _null_;
30793     +       file _F1 mod;
30794     +       put "Proc sql noprint;";
30795     +       put "create table tmp1 as ";
30796     +       put "select a.&emid , b.item2 as &target, sum(b.count*b.confidence)/sum(b.count) as confidence ";
30797     +       put "from &indata a, &ruledata b ";
30798     +       put "where cats(a.&target) = b.item1 ";
30799     +       put "group by a.&emid, b.item2 ";
30800     +       put "order by a.&emid, confidence desc; ";
30801     +       put "create table tmp2 as select &emid, &target ";
30802     +       put "from tmp1 ";
30803     +       put "except ";
30804     +       put "      select &emid, cats(&target) as &target";
30805     +       put "      from &indata ";
30806     +       put " ; ";
30807     +       put "create table &outdata as   ";
30808     +       put "      select b.&emid,b.&target,b.confidence  ";
30809     +       put "      from tmp2 a, tmp1 b    ";
30810     +       put "      where a.&emid=b.&emid and a.&target=b.&target  ";
30811     +       put " ;  ";
30812     +       put "quit; ";
30814     +       put " data &outdata;";
30815     +       put "     set &outdata;";
30816     +       put "     by &emid; retain rank 0;";
30817     +       put "     if first.&emid then rank=1;";
30818     +       put "     else rank+1;";
30819     +       put " run;";
30821     +       %if  "&em_property_RECOMMENDEXPORT"="FILTEREDRECTABLE" %then %do;
30823     +       put "data &indata;";
30824     +       put "      set &outdata;";
30825     +       put " where (rank le &EM_PROPERTY_TOPN) ";
30826     +              %if "&EM_PROPERTY_CRITOPERATOR" eq "OR" %then %do;
30827     +       put "      or ";
30828     +              %end;
30829     +              %else %do;
30830     +       put "     and ";
30831     +              %end;
30832     +              %if &EM_PROPERTY_CONFFILTER ne . %then %do;
30833     +       put "     (confidence>=&EM_PROPERTY_CONFFILTER) ";
30834     +              %end;
30835     +              %else %do;
30836     +       put "     (confidence>=&EM_PROPERTY_MINCONF) ";
30837     +              %end;
30838     +       put ";";
30839     +       %end;
30840     +       %else %do;
30841     +       put " data &indata;";
30842     +       put "     set &outdata;";
30843     +       %end;
30844     +       put "run;";
30846     +       put "proc datasets lib=work nolist;";
30847     +       put "   delete tmp1 tmp2 &outdata &ruledata;";
30848     +       put "run;";
30849     +    run;
30851     +    filename _F1;
30853     +    data &em_export_transaction / view= &em_export_transaction;
30854     +        set &EM_USER_SORTEDTRANS;
30855     +    run;
30856     +    data &em_export_train / view= &em_export_train;
30857     +        %if  "&em_property_RECOMMENDEXPORT"="FULLRECTABLE" %then %do;
30858     +              set &em_user_recommend;
30859     +        %end;
30860     +        %if  "&em_property_RECOMMENDEXPORT"="FILTEREDRECTABLE" %then %do;
30861     +              set &em_user_recommendfiltered;
30862     +        %end;
30863     +    run;
30866     + %end;
30869     + /*----------------------------Transactional Data, Recommendation=N-------------------------------------------------------*/
30870     + /*If transactional data with Recommendation=N: export import data(sorted by id) plus segmentation info if no sequence var;
30871     +   else export import transaction data srted by ID;*/
30873     + %if &em_lnka_transdata_indicator=1  and (&EM_PROPERTY_RecommendInd=N)  %then %do;
30874     + %EM_GETNAME(KEY=SORTEDTRANS, TYPE=DATA);*Ye;
30876     +    /*------------No Sequence variable------------*/
30877     +    %if %EM_SEQUENCE eq %then %do;
30878     +      %em_getname(key=COMMOVERLAP, type=data);
30879     +      %em_getname(key=COMMOVERLAP2, type=data);
30880     +      %let target_vars=%EM_TARGET;
30881     +      %em_linkan_getoverlap2_trans(overlap=&EM_USER_COMMOVERLAP,overlap2=&EM_USER_COMMOVERLAP2,target=&target_vars);
30883     +      %let indata = %str(&)%str(EM_SCORE_OUTPUT);
30884     +      %let id=%EM_ID;
30887     +      filename flowcode "&EM_FILE_EMFLOWSCORECODE";
30888     +      filename pubcode "&EM_FILE_EMPUBLISHSCORECODE";
30890     +      %let dsid = %sysfunc(open(&EM_USER_COMMOVERLAP2));
30891     +      %let vn_node = %sysfunc(varnum(&dsid, node));
30892     +      %let vn_varname = %sysfunc(varnum(&dsid, varname));
30893     +      %let vn_community = %sysfunc(varnum(&dsid, ItemCluster));
30894     +      %let vn_cummuintensity = %sysfunc(varnum(&dsid, intensity));
30896     +      /*get max community number: community has been remaped to 1-max_comm*/
30898     +      proc sql noprint;
30899     +        select max(ItemCluster) into:_num_arr
30900     +        from &EM_USER_COMMOVERLAP2;
30901     +      quit;
30902     +      %let _num_arr = &_num_arr;
30904     +      %if %sysfunc(fexist(pubcode)) eq 1 %then %do;
30905     +      %let rc = %sysfunc(fdelete(pubcode));
30906     +      %end;
30908     +      data _null_;
30909     +        file pubcode mod ;
30910     +        put "&em_codebar;";
30911     +        put "* LA: Score Code for Transactional Data with No Seq Var, Rec=N;";
30912     +        put "* To run this score code as stand alone uncomment the code below and set the LADATA and EM_SCORE_OUTPUT macro variables;";
30913     +        put '* %let EM_SCORE_OUTPUT=;';
30914     +        put '* %let LADATA =;';
30915     +        put '* data &EM_SCORE_OUTPUT;';
30916     +        put '*   set &LADATA;';
30917     +        put "* run;";
30918     +        put "&em_codebar;";
30919     +        put "proc sort data=&indata;by &id;run;";
30920     +        put "data &indata;";
30921     +        put "set &indata;";
30922     +      run;
30924     +      %if %sysfunc(fexist(flowcode)) eq 1 %then %do;
30925     +      %let rc = %sysfunc(fdelete(flowcode));
30926     +      %end;
30928     +      data _null_;
30929     +        file flowcode mod ;
30930     +        put "array _cummuintens{&_num_arr};";
30931     +        put "by &id ;";
30932     +        put "if first.&id then do;";
30933     +        put "do i=1 to &_num_arr ; ";
30934     +        put "_cummuintens[i] = 0 ;";
30935     +        put "end ;";
30936     +        put "end ;";
30937     +        %do %while(^ %sysfunc(fetch(&dsid)));
30938     +         %let varname =   %sysfunc(getvarc(&dsid, &vn_varname));
30939     +         %let node=  %sysfunc(getvarc(&dsid, &vn_node));
30940     +         %let ItemCluster = %sysfunc(getvarn(&dsid, &vn_community));
30941     +         %let intensity = %sysfunc(getvarn(&dsid, &vn_cummuintensity));
30942     +         put "if cats(&varname) eq '&node' then _cummuintens{&ItemCluster} + &intensity;";
30943     +        %end;
30944     +        put "if last.&id then do;";
30945     +        put "_max= _cummuintens{1} ; ";
30946     +        put "_SEGMENT_= 1; ";
30947     +        put "do i=1 to &_num_arr ; ";
30948     +        put "if _cummuintens[i]>_max then do ;";
30949     +        put "_max=_cummuintens[i];";
30950     +        put "_SEGMENT_= i;";
30951     +        put "end ;";
30952     +        put "if _max=0 then _SEGMENT_=0;";
30953     +        put "end ;";
30954     +        put "end ;";
30955     +        put "drop i ;";
30956     +        put "drop _cummuintens1-_cummuintens&_num_arr. _max;";/*should not add run;*/
30957     +        %let dsid = %sysfunc(close(&dsid));
30958     +      run;
30960     +      %em_copyfile(infref=flowcode, outfref=pubcode, append=Y);/*Append flowcode to pubcode;*/
30962     +      /*Manually score on sorted transactional data(sort by id var): generate segmentation column;*/
30963     +      data &em_export_transaction / view= &em_export_transaction;
30964     +        set &EM_USER_SORTEDTRANS;
30965     +        %inc flowcode;
30966     +         label _segment_="%sysfunc(sasmsg(sashelp.dmine, lnka_segmtid_vlabel, noquote))";
30967     +      run;
30968     +      /*----Defect S0974157:_Segment_ variable is not generated for Validation and Test input--1--*/
30969     +      %if "&EM_IMPORT_VALIDATE" ne "" and (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE, view))) %then %do;
30970     +        proc sort data=&em_import_validate out=&em_export_validate;by %EM_ID;run;
30972     +        data &em_export_validate;
30973     +          set &em_export_validate;
30974     +          %inc flowcode;
30975     +          label _segment_="%sysfunc(sasmsg(sashelp.dmine, lnka_segmtid_vlabel, noquote))";
30976     +        run;
30977     +      %end;
30979     +      %if "&EM_IMPORT_TEST" ne "" and (%sysfunc(exist(&EM_IMPORT_TEST)) or %sysfunc(exist(&EM_IMPORT_TEST, view))) %then %do;
30980     +        proc sort data=&em_import_test out=&em_export_test;by %EM_ID;run;
30982     +        data &em_export_test;
30983     +          set  &em_export_test;
30984     +          %inc flowcode;
30985     +          label _segment_="%sysfunc(sasmsg(sashelp.dmine, lnka_segmtid_vlabel, noquote))";
30986     +        run;
30987     +      %end;
30988     +      /*----END--Defect S0974157:_Segment_ variable is not generated for Validation and Test input--1--*/
30990     +      %if %sysfunc(fexist(flowcode)) eq 1 %then %do;
30991     +      %let rc = %sysfunc(fdelete(flowcode));
30992     +      %end;
30994     +      filename flowcode;
30995     +      filename pubcode;
30998     +      data &em_export_train / view= &em_export_train;
30999     +         set  &em_export_transaction(keep=&id _SEGMENT_);
31000     +         by &id;
31001     +         if last.&id then output;
31002     +      run;
31004     +      filename _F "&EM_FILE_CDELTA_TRAIN";
31005     +        data _null_;
31006     +                length string $400;
31007     +                file _F;
31008     +                        string = 'if upcase(NAME)="_SEGMENT_" then do;';               put string;
31009     +                        string = '      ROLE="SEGMENT";';                              put string;
31010     +                        string = '      LABEL="%sysfunc(sasmsg(sashelp.dmine, lnka_segmtvar_vlabel, noquote))";';  put string;
31011     +                        string = 'end;';                                               put string;
31012     +        run;
31014     +      filename _F;
31016     +      filename _FTRANS "&EM_FILE_CDELTA_TRANSACTION";
31017     +        data _null_;
31018     +                length string $400;
31019     +                file _FTRANS;
31020     +                        string = 'if upcase(NAME)="_SEGMENT_" then do;';               put string;
31021     +                        string = '      ROLE="SEGMENT";';                              put string;
31022     +                        string = '      LABEL="%sysfunc(sasmsg(sashelp.dmine, lnka_segmtvar_vlabel, noquote))";';  put string;
31023     +                        string = 'end;';                                               put string;
31024     +        run;
31026     +      filename _FTRANS;
31028     +      *%EM_METACHANGE(name=_segment_, role=SEGMENT);
31030     +      proc delete data=&EM_USER_COMMOVERLAP2;run;
31031     +     /* proc delete data=&EM_USER_SORTEDTRANS;run;*/
31032     +    %end;
31034     +    /*-----------With Sequence variable------------*/
31035     +    /*Transactional Data with Sequence Var: No community info*/
31036     +    %else %do;
31037     +        data &em_export_transaction / view= &em_export_transaction;
31038     +        set &EM_USER_SORTEDTRANS;
31039     +        run;
31040     +    %end;
31042     + %end;
31044     + /*----------------------------Relational Data: segmentation info added----------------------------------*/
31045     + /*relational data scoring*/
31046     + %if &em_lnka_transdata_indicator=0 %then %do;
31048     +  /*-------------Append varname and level to commoverlap data for scoring relational data---------------*/
31049     +      %em_getname(key=TRANS, type=data);
31050     +      %em_getname(key=COMMOVERLAP, type=data);
31051     +      %em_getname(key=COMMOVERLAP2, type=data);
31052     +      %em_getname(key=BINMAPPINGS, type=data);
31053     +      %em_linkan_getoverlap2_rela(trans=&EM_USER_TRANS,overlap=&EM_USER_COMMOVERLAP,overlap2=&EM_USER_COMMOVERLAP2);
31056     +     filename flowcode "&EM_FILE_EMFLOWSCORECODE";
31057     +     filename pubcode "&EM_FILE_EMPUBLISHSCORECODE";
31060     +     /*get max community number: community has been remaped to 1-max_comm*/
31061     +     proc sql noprint;
31062     +          select max(ItemCluster) into:_num_arr from &EM_USER_COMMOVERLAP2;
31063     +     quit;
31064     +     %let _num_arr = &_num_arr;  /*%let removes leading and trailing blanks*/
31066     +     %let binmappings_exist=0;
31067     +     %if "&EM_USER_BINMAPPINGS" ne "" and %sysfunc(exist(&EM_USER_BINMAPPINGS)) %then %do;
31068     +     proc sql noprint;
31069     +          create table bin_vars as
31070     +          select distinct bin_name
31071     +          from &EM_USER_BINMAPPINGS;
31072     +     quit;
31073     +     %let binmappings_exist=1;
31074     +     %end;
31077     +      filename X "&EM_USER_BINNINGCODE";
31079     +     %if %sysfunc(fexist(flowcode)) eq 1 %then %do;
31080     +      %let rc = %sysfunc(fdelete(flowcode));
31081     +     %end;
31082     +     data _null_;
31083     +        file flowcode mod;
31084     +        put "&em_codebar;";
31085     +        put "* LA: Score Code for Train/Raw Data;";
31086     +        put "* To run this score code as stand alone uncomment the code below and set the LADATA and EM_SCORE_OUTPUT macro variables;";
31087     +        put '* %let EM_SCORE_OUTPUT=;';
31088     +        put '* %let LADATA =;';
31089     +        put '* data &EM_SCORE_OUTPUT;';
31090     +        put '*   set &LADATA;';
31091     +        put "* run;";
31092     +        put "&em_codebar;";
31093     +      run;
31095     +    %em_linkan_appendfiles(flowcode, X);/*append binningcode to flowcode;*/
31096     +     filename X;
31098     +     %let label_segment_=%sysfunc(sasmsg(sashelp.dmine, lnka_segmtid_vlabel, noquote));
31099     +     data _null_;
31100     +          file flowcode mod;
31101     +             length string $200 deqlevel $200;
31102     +             set &EM_USER_COMMOVERLAP2 end=eof;
31104     +             if _N_ =1 then do;
31105     +                put "array _intens{&_num_arr};";
31106     +                put "do i=1 to &_num_arr ; ";
31107     +                put "drop i ;";
31108     +                put "_intens[i] = 0 ;";
31109     +                put "end ;";
31110     +                put "length _UFormat $200;";
31111     +                put "drop _UFormat;";
31112     +                put "_UFormat = '';";
31113     +             end;
31115     +             deqlevel  =  upcase(tranwrd(level, "'","''"));
31117     +             string = "_UFormat = put("!!strip(varname)!!","!!strip(format)!!");";
31118     +             put string;
31119     +             string = '%dmnormip(_UFormat);';
31120     +             put string;
31121     +             /*S097627*/
31122     +             if deqlevel ne '.' then do;
31123     +               string =  "if _UFormat eq '"!!strip(deqlevel)!!"' then _intens{"!!strip(ItemCluster)!!"} + "!!strip(intensity)!!";";
31124     +               put string;
31125     +             end;
31126     +             else do;
31127     +               string =  "if _UFormat eq ' ' or  _UFormat eq '.' then _intens{"!!strip(ItemCluster)!!"} + "!!strip(intensity)!!";";
31128     +               put string;
31129     +             end;
31131     +             if eof then do;
31132     +             put "_max = _intens{1} ; ";
31133     +             put "_segment_ = 1; ";
31134     +             put "do i=1 to &_num_arr ; ";
31135     +             put "if _intens[i]>_max then do ;";
31136     +             put "_max = _intens[i];";
31137     +             put "_segment_ = i;";
31138     +             put "end ;";
31139     +             put "end ;";
31140     +             put "drop _intens1-_intens&_num_arr. _max;";
31141     +             put "label _segment_ = &label_segment_;";
31142     +          end;
31143     +    run;
31146     +    %if &binmappings_exist eq 1 %then %do;
31147     +           data _null_;
31148     +              file flowcode mod;
31149     +               /*--- drop binned variable ----------------*/
31150     +               Set work.bin_vars;
31151     +                      put "drop " bin_name ";";
31152     +            run;
31153     +    %end;
31155     +    %em_copyfile(infref=flowcode, outfref=pubcode, append=N);
31157     +     filename _F "&EM_FILE_CDELTA_TRAIN";
31158     +        data _null_;
31159     +                length string $400;
31160     +                file _F;
31161     +                        string = 'if upcase(NAME)="_SEGMENT_" then do;';               put string;
31162     +                        string = '      ROLE="SEGMENT";';                              put string;
31163     +                        string = '      LABEL="%sysfunc(sasmsg(sashelp.dmine, lnka_segmtvar_vlabel, noquote))";';                              put string;
31164     +                        string = 'end;';                                               put string;
31165     +        run;
31167     +      filename _F;
31169     +    filename flowcode;
31170     +    filename pubcode;
31171     +    *%EM_METACHANGE(name=_segment_, role=SEGMENT);
31173     +    proc delete data=&EM_USER_COMMOVERLAP2;run;
31176     + %end;
31178     +%MEND EM_LINKANALYSIS_SCORE;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_LINKANALYSIS_MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_LINKANALYSIS_SCORE):  ;
MPRINT(EM_LINKANALYSIS_SCORE):  ;
MPRINT(EM_LINKANALYSIS_SCORE):  ;
MPRINT(EM_LINKANALYSIS_SCORE):  ;
MPRINT(EM_LINKAN_RECOMMEND):   *get the recommended items;
MPRINT(EM_LINKAN_RECOMMEND):   *assuming the length of inferences is limit to one association rule;
MPRINT(EM_LINKAN_RECOMMEND):   proc sql;
MPRINT(EM_LINKAN_RECOMMEND):   create table tmp1 as select a.session_id, b.item2 as requested_file, sum(b.count*b.confidence)/sum(b.count) as confidence from EMWS3.Link_SortedTrans a, EMWS3.Link_RecdRules b where a.requested_file = b.item1 group by
a.session_id, b.item2 order by a.session_id, confidence desc ;
NOTE: Table WORK.TMP1 created, with 1625 rows and 3 columns.
 
MPRINT(EM_LINKAN_RECOMMEND):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.11 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_LINKAN_RECOMMEND):   proc sql noprint;
MPRINT(EM_LINKAN_RECOMMEND):   create table tmp2 as select tmp1.session_id, tmp1.requested_file from tmp1 except select c.session_id, c.requested_file from EMWS3.Link_SortedTrans c ;
NOTE: Table WORK.TMP2 created, with 607 rows and 2 columns.
 
MPRINT(EM_LINKAN_RECOMMEND):   create table _outtrans as select a.*, b.confidence from tmp2 a, tmp1 b where a.session_id=b.session_id and a.requested_file=b.requested_file order by a.session_id, confidence desc ;
NOTE: Table WORK._OUTTRANS created, with 607 rows and 3 columns.
 
MPRINT(EM_LINKAN_RECOMMEND):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.09 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_LINKAN_RECOMMEND):   data EMWS3.Link_Recommend;
MPRINT(EM_LINKAN_RECOMMEND):   set _outtrans;
MPRINT(EM_LINKAN_RECOMMEND):   by session_id;
MPRINT(EM_LINKAN_RECOMMEND):   retain rank 0;
MPRINT(EM_LINKAN_RECOMMEND):   if first.session_id then rank=1;
MPRINT(EM_LINKAN_RECOMMEND):   else rank+1;
MPRINT(EM_LINKAN_RECOMMEND):   label confidence= "Confidence";
MPRINT(EM_LINKAN_RECOMMEND):   label rank= "Rank";
MPRINT(EM_LINKAN_RECOMMEND):   label session_id= "ID Variable";
MPRINT(EM_LINKAN_RECOMMEND):   run;
 
NOTE: There were 607 observations read from the data set WORK._OUTTRANS.
NOTE: The data set EMWS3.LINK_RECOMMEND has 607 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_LINKAN_RECOMMEND):   proc datasets lib=work nolist;
MPRINT(EM_LINKAN_RECOMMEND):   delete tmp1 tmp2 _outtrans;
MPRINT(EM_LINKAN_RECOMMEND):   run;
 
NOTE: Deleting WORK.TMP1 (memtype=DATA).
NOTE: Deleting WORK.TMP2 (memtype=DATA).
NOTE: Deleting WORK._OUTTRANS (memtype=DATA).
MPRINT(EM_LINKANALYSIS_SCORE):  ;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_LINKANALYSIS_SCORE):   data EMWS3.Link_RECOMMENDFIltered;
MPRINT(EM_LINKANALYSIS_SCORE):   set EMWS3.Link_Recommend;
MPRINT(EM_LINKANALYSIS_SCORE):   where (rank le 1) and (confidence>=50) ;
MPRINT(EM_LINKANALYSIS_SCORE):   run;
 
NOTE: There were 224 observations read from the data set EMWS3.LINK_RECOMMEND.
      WHERE (rank<=1) and (confidence>=50);
NOTE: The data set EMWS3.LINK_RECOMMENDFILTERED has 224 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_LINKANALYSIS_SCORE):   filename _F1 catalog 'sashelp.emutil.em_data2code.source';
NOTE: %INCLUDE (level 1) file _F1 is file SASHELP.EMUTIL.EM_DATA2CODE.SOURCE.
31182     +/*
31183     +       MACRO: EM_DATA2CODE
31184     +
31185     +       PURPOSE: Convert Data Set to Data Step Code
31186     +
31187     +       PARAMETERS:
31188     +
31189     +            DATA        = data set
31190     +            OUTDATA     = out data set
31191     +            OUTFILE     = file where to saved the code
31192     +            APPEND      = append (Y/N)
31193     +
31194     +       USAGE:
31195     +
31196     +            %em_data2code(data=, outdata=WORK.DATA);
31197     +
31198     +       AUTHOR:   Dominique Latour
31199     +
31200     +       AMENDMENTS: Initial Version 17Jan03 SASDZL
31201     +
31202     +*/
31203     +
31204     +%macro em_data2code(data=, outdata=WORK.DATA, outfile=, append=N);
31205     +   %if &data eq %then %do;
31206     +       %put ERROR: Data set not defined;
31207     +   %end;
31208     +   %else %do;
31209     +       %if %sysfunc(exist(&data)) eq 0 and %sysfunc(exist(&data, VIEW)) eq 0 %then %do;
31210     +           %put ERROR: Data set does not exist;
31211     +       %end;
31212     +       %else %do;
31213     +           %global em_data em_outdata em_codefile em_append;
31214     +           %let em_data=&data;
31215     +           %let em_outdata=&outdata;
31216     +           %let em_codefile=&outfile;
31217     +           %let em_append=&append;
31218     +           proc display c=sashelp.emutil.data2code.scl;
31219     +           run;
31220     +      %end;
31221     +   %end;
31222     +%mend;
31223     +
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_LINKANALYSIS_SCORE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(EM_LINKANALYSIS_SCORE):   filename _F1 "J:\JMMORR01\CIS 445\CIS 445 Tutorial 3\Workspaces\EMWS3\Link\EMPUBLISHSCORE.sas";
MPRINT(EM_LINKANALYSIS_SCORE):   data _null_;
MPRINT(EM_LINKANALYSIS_SCORE):   file _F1 mod;
MPRINT(EM_LINKANALYSIS_SCORE):   put "*------------------------------------------------------------*;";
MPRINT(EM_LINKANALYSIS_SCORE):   put "* LA: Score Code for Transactional Data, Rec=Y;";
MPRINT(EM_LINKANALYSIS_SCORE):   put "* To run this score code as stand alone uncomment the code below and set the LADATA and EM_SCORE_OUTPUT macro variables;";
MPRINT(EM_LINKANALYSIS_SCORE):   put '* %let EM_SCORE_OUTPUT=;';
MPRINT(EM_LINKANALYSIS_SCORE):   put '* %let LADATA =;';
MPRINT(EM_LINKANALYSIS_SCORE):   put '* data &EM_SCORE_OUTPUT;';
MPRINT(EM_LINKANALYSIS_SCORE):   put '*   set &LADATA;';
MPRINT(EM_LINKANALYSIS_SCORE):   put "* run;";
MPRINT(EM_LINKANALYSIS_SCORE):   put "*------------------------------------------------------------*;";
MPRINT(EM_LINKANALYSIS_SCORE):   run;
 
NOTE: The file _F1 is:
      Filename=J:\JMMORR01\CIS 445\CIS 445 Tutorial 3\Workspaces\EMWS3\Link\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=13Nov2018:10:31:33,
      Create Time=13Nov2018:10:30:32
 
NOTE: 9 records were written to the file _F1.
      The minimum record length was 6.
      The maximum record length was 120.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DATA2CODE):   proc display c=sashelp.emutil.data2code.scl;
MPRINT(EM_DATA2CODE):   run;
 
NOTE: There were 111 observations read from the data set EMWS3.LINK_RECDRULES.
NOTE: The data set WORK.RULEDATA has 111 observations and 9 variables.
31224      %em_copyfile(infref=#LN00348, outfref=#LN00347, append=Y);
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file #LN00347 MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("#LN00348",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file #LN00347 is:
      Filename=J:\JMMORR01\CIS 445\CIS 445 Tutorial 3\Workspaces\EMWS3\Link\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=397,
      Last Modified=13Nov2018:10:31:33,
      Create Time=13Nov2018:10:30:32
 
NOTE: 251 records were written to the file #LN00347.
      The minimum record length was 1.
      The maximum record length was 240.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DATA2CODE):  ;
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.09 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_DATA2CODE):
MPRINT(EM_LINKANALYSIS_SCORE):  ;
MPRINT(EM_LINKANALYSIS_SCORE):   data _null_;
MPRINT(EM_LINKANALYSIS_SCORE):   file _F1 mod;
MPRINT(EM_LINKANALYSIS_SCORE):   put "Proc sql noprint;";
MPRINT(EM_LINKANALYSIS_SCORE):   put "create table tmp1 as ";
MPRINT(EM_LINKANALYSIS_SCORE):   put "select a.session_id , b.item2 as requested_file, sum(b.count*b.confidence)/sum(b.count) as confidence ";
MPRINT(EM_LINKANALYSIS_SCORE):   put "from &EM_SCORE_OUTPUT a, ruledata b ";
MPRINT(EM_LINKANALYSIS_SCORE):   put "where cats(a.requested_file) = b.item1 ";
MPRINT(EM_LINKANALYSIS_SCORE):   put "group by a.session_id, b.item2 ";
MPRINT(EM_LINKANALYSIS_SCORE):   put "order by a.session_id, confidence desc; ";
MPRINT(EM_LINKANALYSIS_SCORE):   put "create table tmp2 as select session_id, requested_file ";
MPRINT(EM_LINKANALYSIS_SCORE):   put "from tmp1 ";
MPRINT(EM_LINKANALYSIS_SCORE):   put "except ";
MPRINT(EM_LINKANALYSIS_SCORE):   put "      select session_id, cats(requested_file) as requested_file";
MPRINT(EM_LINKANALYSIS_SCORE):   put "      from &EM_SCORE_OUTPUT ";
MPRINT(EM_LINKANALYSIS_SCORE):   put " ; ";
MPRINT(EM_LINKANALYSIS_SCORE):   put "create table _tmpout as   ";
MPRINT(EM_LINKANALYSIS_SCORE):   put "      select b.session_id,b.requested_file,b.confidence  ";
MPRINT(EM_LINKANALYSIS_SCORE):   put "      from tmp2 a, tmp1 b    ";
MPRINT(EM_LINKANALYSIS_SCORE):   put "      where a.session_id=b.session_id and a.requested_file=b.requested_file  ";
MPRINT(EM_LINKANALYSIS_SCORE):   put " ;  ";
MPRINT(EM_LINKANALYSIS_SCORE):   put "quit; ";
MPRINT(EM_LINKANALYSIS_SCORE):   put " data _tmpout;";
MPRINT(EM_LINKANALYSIS_SCORE):   put "     set _tmpout;";
MPRINT(EM_LINKANALYSIS_SCORE):   put "     by session_id; retain rank 0;";
MPRINT(EM_LINKANALYSIS_SCORE):   put "     if first.session_id then rank=1;";
MPRINT(EM_LINKANALYSIS_SCORE):   put "     else rank+1;";
MPRINT(EM_LINKANALYSIS_SCORE):   put " run;";
MPRINT(EM_LINKANALYSIS_SCORE):   put " data &EM_SCORE_OUTPUT;";
MPRINT(EM_LINKANALYSIS_SCORE):   put "     set _tmpout;";
MPRINT(EM_LINKANALYSIS_SCORE):   put "run;";
MPRINT(EM_LINKANALYSIS_SCORE):   put "proc datasets lib=work nolist;";
MPRINT(EM_LINKANALYSIS_SCORE):   put "   delete tmp1 tmp2 _tmpout ruledata;";
MPRINT(EM_LINKANALYSIS_SCORE):   put "run;";
MPRINT(EM_LINKANALYSIS_SCORE):   run;
 
NOTE: The file _F1 is:
      Filename=J:\JMMORR01\CIS 445\CIS 445 Tutorial 3\Workspaces\EMWS3\Link\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=24541,
      Last Modified=13Nov2018:10:31:33,
      Create Time=13Nov2018:10:30:32
 
NOTE: 31 records were written to the file _F1.
      The minimum record length was 3.
      The maximum record length was 102.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_LINKANALYSIS_SCORE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(EM_LINKANALYSIS_SCORE):   data EMWS3.Link_TRANSACTION / view= EMWS3.Link_TRANSACTION;
MPRINT(EM_LINKANALYSIS_SCORE):   set EMWS3.Link_SortedTrans;
MPRINT(EM_LINKANALYSIS_SCORE):   run;
 
NOTE: DATA STEP view saved on file EMWS3.LINK_TRANSACTION.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_LINKANALYSIS_SCORE):   data EMWS3.Link_TRAIN / view= EMWS3.Link_TRAIN;
MPRINT(EM_LINKANALYSIS_SCORE):   set EMWS3.Link_Recommend;
MPRINT(EM_LINKANALYSIS_SCORE):   run;
 
NOTE: DATA STEP view saved on file EMWS3.LINK_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_LINKANALYSIS_MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End SCORE: Link;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
31225      *------------------------------------------------------------*;
31226      * End SCORE: Link;
31227      *------------------------------------------------------------*;
 
31229      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
31230      * Link: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Link: Computing metadata for TRAIN data;
31231      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS3.LINK_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "J:\JMMORR01\CIS 445\CIS 445 Tutorial 3\Workspaces\EMWS3\Link\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS3.Link_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS3.Link_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS3.Link_TRAIN out=WORK.M2E_8TR3 noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2E_8TR3;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M2E_8TR3(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2E_8TR3;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M2E_8TR3;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M39P3T__ NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M39P3T__;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M39P3T__;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0O6MBEQ(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M39P3T__;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M39P3T__;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M39P3T__;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M39P3T__;
MPRINT(EMADVISECOLUMNS):   set WORK.M39P3T__;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data EMWS3.Link_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   length creator $32;
MPRINT(EM_DIAGRAM):   CREATOR = "Link";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Link: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
NOTE: View EMWS3.LINK_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
31554      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
31555      * Link: Computing metadata for TRANSACTION data;
MPRINT(EM_DIAGRAM):   * Link: Computing metadata for TRANSACTION data;
31556      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS3.LINK_TRANSACTION.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRANSACTION data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS3.Link_TRANSACTION out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS3.Link_TRANSACTION');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS3.Link_TRANSACTION out=WORK.M08AFWET noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M08AFWET;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M08AFWET(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M08AFWET;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M08AFWET;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M0UD9RVR NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0UD9RVR;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M0UD9RVR;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1Y0M4R9(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M0UD9RVR;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0UD9RVR;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M0UD9RVR;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0UD9RVR;
MPRINT(EMADVISECOLUMNS):   set WORK.M0UD9RVR;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS3.Ids_DATA noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS3.Ids_CMeta_DATA out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS3.Link_CMeta_TRANSACTION;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Link";
MPRINT(EM_DIAGRAM):   run;
NOTE: View EMWS3.LINK_TRANSACTION.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 13, 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "10:31:36" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                November 13, 2018
Time:                10:31:36
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2RK8PP0 "J:\JMMORR01\CIS 445\CIS 445 Tutorial 3\Workspaces\EMWS3\Link\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2RK8PP0 new;
MPRINT(EM_DIAGRAM):   run;
31911      %let EMEXCEPTIONSTRING=;
31912      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
31913      * REPORT: Link;
MPRINT(EM_DIAGRAM):   * REPORT: Link;
31914      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
31915      %let EM_ACTION = REPORT;
31916      %let syscc = 0;
31917      %MACRO EM_LINKANALYSIS_MAIN;
31918        filename temp catalog 'sashelp.emexpl.link_macros.source';
31919            %include temp;
31920        filename temp;
31921
31922         %if %upcase(&EM_ACTION) = CREATE %then %do;
31923          filename temp catalog 'sashelp.emexpl.link_create.source';
31924            %include temp;
31925          filename temp;
31926          %EM_LINKANALYSIS_CREATE;
31927         %end;
31928
31929         %if %upcase(&EM_ACTION) = TRAIN %then %do;
31930          filename temp catalog 'sashelp.emexpl.link_train.source';
31931             %include temp;
31932            filename temp;
31933          %EM_LINKANALYSIS_TRAIN;
31934        %end;
31935
31936         %if %upcase(&EM_ACTION) = SCORE %then %do;
31937          filename temp catalog 'sashelp.emexpl.link_score.source';
31938          %include temp;
31939          filename temp;
31940          %EM_LINKANALYSIS_SCORE;
31941        %end;
31942
31943         %if %upcase(&EM_ACTION) = REPORT %then %do;
31944          filename temp catalog 'sashelp.emexpl.link_report.source';
31945          %include temp;
31946          filename temp;
31947          %EM_LINKANALYSIS_REPORT;
31948        %end ;
31949      %MEND EM_LINKANALYSIS_MAIN;
31950
31951      %EM_LINKANALYSIS_MAIN;
MPRINT(EM_DIAGRAM):
MPRINT(EM_LINKANALYSIS_MAIN):   filename temp catalog 'sashelp.emexpl.link_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.LINK_MACROS.SOURCE.
31952     +%macro em_linkan_nobs(ds);
31953     +  %let dsID = %sysfunc(open(&ds));
31954     +  %if &dsID %then %do;
31955     +    %let nObs = %sysfunc(attrn(&dsID,nlobsf));
31956     +    %let rc   = %sysfunc(close(&dsID));
31957     +  %end;
31958     +  &nObs
31959     +%mend em_linkan_nobs;
31962     +%macro em_linkan_appendfiles(fileref1, fileref2);/*append fileref2 to fileref1;*/
31963     +     data _null_;
31964     +       length c $256;
31965     +       fid1=fopen("&fileref1",'A');
31966     +       fid2=fopen("&fileref2",'I');
31967     +       cval = finfo(fid2,'lrecl');
31968     +       put cval= fid1= fid2=;
31969     +       if (fid2 > 0) then
31970     +         do while(fread(fid2)=0);
31971     +           rc = fget(fid2,c,256);
31972     +           _msg_=sysmsg();
31973     +           /* put rc= c= _msg_=; */
31974     +           rc = fput(fid1,strip(c));
31975     +           rc = fwrite(fid1);
31976     +         end;
31977     +         _msg_=sysmsg();
31978     +         put _msg_=;
31979     +       rc = fclose(fid1);
31980     +       rc = fclose(fid2);
31981     +     run;
31982     +%mend em_linkan_appendfiles;
31984     +%macro em_linkan_getnodesfromlinks(nodes=,links=,lookupnodes=, samegroup=Y);
31985     +   %if %upcase(&samegroup)= N %then %do;
31986     +        %let idv=%EM_ID;
31987     +        %let target=%EM_TARGET;
31988     +    %end;
31990     +    proc sql;
31991     +          create table _node1 as
31992     +            select distinct from as node %if %upcase(&samegroup)= N %then %do; , "&idv" as _group %end;
31993     +            from &links;
31994     +          create table _node2 as
31995     +            select distinct to as node %if %upcase(&samegroup)= N %then %do; , "&target" as _group %end;
31996     +            from &links;
31997     +    quit;
31999     +   %if %upcase(&samegroup)= Y %then %do;
32000     +    proc sql;
32001     +      create table _nodes_tmp as
32002     +        select node
32003     +        from _node1
32004     +       UNION
32005     +        select node
32006     +        from _node2;
32007     +    quit;
32009     +    proc sql;
32010     +    create table &nodes as
32011     +     select b.*
32012     +      from _nodes_tmp as a
32013     +          LEFT JOIN
32014     +           &lookupnodes as b
32015     +        on a.node = b.node;
32016     +    quit;
32017     +    %end;
32020     +   %if %upcase(&samegroup)= N %then %do;
32021     +    data &nodes;
32022     +          retain node _group _group_ind;
32023     +          format _group $32.;
32024     +          set _node1 _node2;
32025     +          if _group="&idv" then _group_ind=1;
32026     +          if _group="&target" then _group_ind=2;
32027     +    run;
32028     +    %end;
32030     +     proc datasets lib=work nolist;
32031     +         delete _node1 _node2 %if %upcase(&samegroup)= Y %then %do; _nodes_tmp %end;
32032     +         ;
32033     +    run;
32034     +    quit;
32036     +%mend;
32038     +%macro  em_linkan_transpose(data=,
32039     +                            trans=,
32040     +                            binout=,
32041     +                            binnum=,
32042     +                            lookup=
32043     +                            );
32045     +  /*------------------------- Bin interval vars---------------------------- */
32046     +  %if %eval(&EM_NUM_INTERVAL_INPUT+&EM_NUM_INTERVAL_REJECTED+&EM_NUM_INTERVAL_TARGET) > 0  %then %do;
32047     +            /*   Use Binning macro      */
32048     +             %em_getname(key=BINNINGCODE, type=file);
32049     +             %if "&EM_PROPERTY_BINMETHOD"="BUCKET" %then %do;
32050     +                 filename temp1 catalog 'sashelp.emapps.bucket_binning.source';
32051     +             %end;
32053     +             %if "&EM_PROPERTY_BINMETHOD"="QUANTILE" %then %do;
32054     +                 filename temp1 catalog 'sashelp.emapps.quantile_binning.source';
32055     +             %end;
32057     +             %include temp1;
32058     +             filename temp1;
32059     +             filename X "&EM_USER_BINNINGCODE";
32062     +            /* Create a temporary varset, change role to "INPUT" if (role="REJECTED" and use= Y)*/
32063     +            data _tmp_varset;
32064     +                set &EM_DATA_VARIABLESET;
32065     +                if upcase(role) = "REJECTED" and upcase(use) = "Y" and upcase(level) = "INTERVAL"
32066     +                    then role = "INPUT";
32067     +            run;
32070     +             %if "&EM_PROPERTY_BINMETHOD"="BUCKET" %then %do;
32071     +                %em_apps_bucket_binning(&EM_IMPORT_DATA, _tmp_varset, &binnum, &EM_USER_BINMAPPINGS, %str(X) , dropOriginal=N, IncludeTarget=Y);
32072     +             %end;
32073     +             %if "&EM_PROPERTY_BINMETHOD"="QUANTILE" %then %do;
32074     +                %em_apps_quantile_binning(&EM_IMPORT_DATA, _tmp_varset, &binnum, &EM_USER_BINMAPPINGS, %str(X) , dropOriginal=N, IncludeTarget=Y);
32075     +             %end;
32077     +            /*Get binned data */
32078     +             data &binout; /*will keep all original data*/
32079     +                  set &data(keep = %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT  %EM_INTERVAL_INPUT
32080     +                       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED  %EM_INTERVAL_REJECTED
32081     +                       %EM_TARGET) ;
32082     +                  %inc X;
32083     +              run;
32086     +              proc print data=&binout;run;
32087     +             filename X;
32088     +  %end;
32089     +  %else %do;             /*No interval vars */
32090     +            data &binout;
32091     +                 set &data(keep = %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
32092     +                       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
32093     +                       %EM_TARGET) ;
32094     +           run;
32095     +  %end;
32097     +  proc contents data = &binout(drop=%EM_INTERVAL_INPUT   %EM_INTERVAL_REJECTED  %EM_INTERVAL_TARGET) out = varsdata(keep =  name) noprint;
32098     +  run;
32100     +  proc sql noprint;
32101     +      select count(*) into :_numvars from varsdata;
32102     +      select name into :var1-:var%left(&_numvars) from varsdata order by name;
32103     +  quit;
32107     +/*Create Transactional data from binout */
32108     +  data &trans.;
32109     +      set &binout(drop=%EM_INTERVAL_INPUT   %EM_INTERVAL_REJECTED  %EM_INTERVAL_TARGET);
32110     +      format  tmpstr $100. item $100. level $100. _category $32.;
32111     +      drop tmpstr;
32112     +        %do i = 1 %to &_numvars ;
32113     +            newid=_N_;            /*Customer Id */
32114     +            tmpstr=cats(&&&&var&i);
32115     +            if tmpstr eq ' '    /*If variable has a missing level*/
32116     +            then do;
32117     +                 item = catx('_',SYMGET('var'||LEFT(&i)),'.');
32118     +                 level='.';
32119     +            end;
32120     +            else do;
32121     +                 item = catx('_',SYMGET('var'||LEFT(&i)),&&&&var&i);
32122     +                 level=tmpstr;
32123     +            end;
32124     +          _category=  "&&var&i." ;/*Original Var info*/
32125     +         * _category_ind= &i;
32126     +          output ;
32127     +        %end;
32128     +       keep newid item level _category;
32129     +  run;
32131     +  proc sql;
32132     +      create table &lookup as
32133     +      select distinct Item, level, _category, "%sysfunc(sasmsg(sashelp.dmine,lnka_level_valuelabel, noquote))" as _group
32134     +       from &trans;
32135     +  quit;
32139     +  /*--- delete binout ----*/
32140     +  proc delete data= &binout;run;
32141     +  proc delete data= varsdata ;run;
32143     +%mend em_linkan_transpose;
32146     +%macro em_linkan_TransAsNodesLinks(indata = ,
32147     +                                    idv=,
32148     +                                    target=,
32149     +                                    freq=,
32150     +                                    outnodes=,
32151     +                                    outlinks=
32152     +                                    );             /*Explore Transactional Data: User(From)->Product(To)*/
32154     +  /*idv: customer; target: target*/
32155     +  data &outlinks;
32156     +      set &indata;
32157     +      format from $100. to $100.;
32158     +      from = cats(&idv);
32159     +      to  = cats(&target);
32160     +      drop &idv &target;
32161     +      %if &freq eq %then %do;
32162     +      weight=1;
32163     +      %end;
32164     +        %if &freq ne %then %do;
32165     +            rename &freq=weight ;
32166     +        %end;
32167     +      linkid=_N_;
32168     +  run;
32170     +   proc sql noprint;
32171     +       select count(*) into: translinkrows
32172     +       from &outlinks;
32173     +   quit;
32175     +  %if &translinkrows>10000 %then %do;/*exception handling for links data that exceeds the row download limit of 20k */
32176     +       /*Keep only top 10k rows of links data*/
32177     +      data &outlinks;
32178     +         set &outlinks(obs=10000);
32179     +      run;
32180     +  %end;
32182     +  %em_linkan_getnodesfromlinks(nodes=&outnodes,links=&outlinks,lookupnodes=, samegroup=N);
32183     +/*
32184     +  data &outlinks;
32185     +   set &outlinks;
32186     +   rename from=&idv to=&target;
32187     +  run;*/
32189     +%mend  em_linkan_TransAsNodesLinks;
32192     +%macro em_linkan_TransToGraph_AssocSeq(indata =,
32193     +                                       nodes=,
32194     +                                       links=,
32195     +                                       same=,
32196     +                                       window=,
32197     +                                       idv=,
32198     +                                       target=,
32199     +                                       seq=,
32200     +                                       seqsuptype=,
32201     +                                       seqsupport=,
32202     +                                       assocsuptype=,
32203     +                                       assocsupport=
32204     +                                      );
32206     +       %em_getname(key=SORTEDTRANS, type=data);
32207     +       %em_getname(key=TRANSACTION, type=data);
32208     +       %em_getname(key=RecdRules, type=data);
32211     +       proc sort data=&indata out=&EM_USER_SORTEDTRANS;
32212     +            by &idv;
32213     +       run;
32215     +       data &EM_USER_SORTEDTRANS;        /*need to make sure targret is char*/
32216     +            set  &EM_USER_SORTEDTRANS;
32217     +            chartarget=cats(&target);
32218     +            drop &target;
32219     +            rename chartarget=&target;
32220     +       run;
32222     +       proc dmdb batch data=&EM_USER_SORTEDTRANS dmdbcat=cat;
32223     +            id &idv &seq;
32224     +            class &target(desc);
32225     +       run;
32228     +       /*--- If there is no sequence var in transactional data, or raw/train data ----*/
32230     +       %if (&seq. eq ) or ("&indata"="&EM_USER_TRANSACTION") %then %do;
32232     +            proc assoc data=&EM_USER_SORTEDTRANS dmdbcat=cat out=aout items=2
32233     +                        %if "&assocsuptype"="PERCENT" %then %do;
32234     +                        pctsup=&assocsupport
32235     +                        %end;
32236     +                        %if "&assocsuptype"="COUNT" %then %do;
32237     +                        support =&assocsupport
32238     +                        %end;
32239     +                ;
32240     +                cust &idv ;
32241     +                target &target;
32242     +            run;
32246     +             /*obs 2 to &nodeobs: one item set; &nodeobs+1 to &linkobs: two items set*/
32247     +            proc sql noprint;
32248     +                  select count(*) into :nodeobs from aout
32249     +                  where item2 is missing;
32250     +                  select count(*) into :linkobs from aout
32251     +                 ;
32252     +            quit;
32254     +            %let linkfirobs=%eval(&nodeobs.+1);
32256     +             /*------ Exception string : check if two item sets exist at current support level ----*/
32257     +            %if &linkobs. le &linkfirobs. %then %do;
32258     +                  %let EMEXCEPTIONSTRING = exception.server.lnka.resetsupportlevelerr;
32259     +                  %put &em_codebar;
32260     +                  %let errormsg = %sysfunc(sasmsg(sashelp.dmine, lnka.resetsupportlevel_err, noquote));
32261     +                  %put &errormsg;
32262     +                  %put &em_codebar;
32263     +                  %let errorflag=&errorflag+1;
32264     +                  %return;
32265     +            %end;
32267     +            proc rulegen in=aout out=_ruleout(where =(set_size=2)) minconf=&EM_PROPERTY_MINCONF;
32268     +            run;
32270     +            /*------ Exception string : check nobs at _ruleout , if no obs, need to reset confidence level  ----*/
32272     +            %if %em_linkan_nobs(_ruleout) = 0 %then %do;
32273     +                  %let EMEXCEPTIONSTRING = exception.server.lnka.resetconflevelerr;
32274     +                  %put &em_codebar;
32275     +                  %let errormsg = %sysfunc(sasmsg(sashelp.dmine, lnka.resetconflevel_err, noquote));
32276     +                  %put &errormsg;
32277     +                  %put &em_codebar;
32278     +                  %let errorflag=&errorflag+1;
32279     +                  %return;
32280     +            %end;
32282     +           /*Get undirected graph*/
32283     +            data  _nodes;
32284     +                  set aout(firstobs=2 obs=&nodeobs);
32285     +                  rename item1= node  count=weight;
32286     +                  keep item1 count;
32287     +            run;
32290     +            data &links;
32291     +                 set _ruleout;
32292     +                 where (_LHAND ne ' ') and (_RHAND ne ' ') and (_LHAND ne _RHAND) and (set_size=2);
32293     +                 rename  _LHAND=from ;
32294     +                 rename  _RHAND=to;
32295     +                 rename  count=weight;
32296     +                 linkid = _N_;
32297     +                 drop item1 item2 item3;   /*need to drop them or there will be confusion when renaming "from" to "item1, "to" to "item2" in RecdRules*/
32298     +            run;
32300     +       %end;      /*-- end of  %if (&seq. eq ) or ("&indata"="&EM_USER_TRANSACTION") %then %do; -------*/
32301     +       %else %do;
32302     +            /*-- If there is sequence var, note that relatioinal data does not process seq var --*/
32304     +            /*get directed graph*/
32306     +            proc assoc data=&EM_USER_SORTEDTRANS dmdbcat=cat out=aout items=1
32307     +                  %if "&assocsuptype"="PERCENT" %then %do;
32308     +                        pctsup=&assocsupport
32309     +                   %end;
32310     +                   %if "&assocsuptype"="COUNT" %then %do;
32311     +                        support =&assocsupport
32312     +                   %end;
32313     +                ;                                                                                                                                                               ;
32314     +                 cust &idv ;
32315     +                 target &target;
32316     +            run;
32318     +            proc sequence data=&EM_USER_SORTEDTRANS dmdbcat=cat assoc=aout out=_ruleout nitems=2
32319     +                   %if "&seqsuptype"="PERCENT" %then %do;
32320     +                        pctsup=&seqsupport
32321     +                    %end;
32322     +                    %if "&seqsuptype"="COUNT" %then %do;
32323     +                        support =&seqsupport
32324     +                    %end;
32325     +                 ;
32326     +                 cust &idv ;
32327     +                 target &target;
32328     +                 visit  &seq /
32329     +                 %if &same ne . %then %do;
32330     +                              same=&same
32331     +                 %end;
32332     +                 %if &window ne . %then %do;
32333     +                              window=&window
32334     +                 %end;
32335     +                  ;
32336     +            run;
32338     +             /*------ Exception string  :  check nobs at _ruleout , if no obs, need to reset support level    ----*/
32339     +            %if %em_linkan_nobs(_ruleout)=0 %then %do;
32340     +                  %let EMEXCEPTIONSTRING = exception.server.lnka.resetsupportlevelerr;
32341     +                  %put &em_codebar;
32342     +                  %let errormsg = %sysfunc(sasmsg(sashelp.dmine, lnka.resetsupportlevel_err, noquote));
32343     +                  %put &errormsg;
32344     +                  %put &em_codebar;
32345     +                  %let errorflag=&errorflag+1;
32346     +                  %return;
32347     +            %end;
32349     +            data _nodes;
32350     +                 set aout;
32351     +                 if _N_ = 1 then delete;
32352     +                 keep item1 count ;
32353     +                 rename item1=node count=weight;
32354     +            run;
32356     +            data &links;
32357     +                 set _ruleout;
32358     +                 where (iset1 ne ' ') and (iset2 ne ' ') and (iset1 ne iset2) and (nitems=2) and (conf>=&EM_PROPERTY_MINCONF);
32359     +                 rename iset1= from;
32360     +                 rename iset2=to;
32361     +                 rename  count=weight;
32362     +                 linkid=_N_;
32363     +            run;
32365     +               /*------ Exception string  :  check nobs at &linkd, if no obs, need to reset confidence level    ----*/
32366     +            %if %em_linkan_nobs(&links)=0 %then %do;
32367     +                  %let EMEXCEPTIONSTRING = exception.server.lnka.resetconflevelerr;
32368     +                  %put &em_codebar;
32369     +                  %let errormsg = %sysfunc(sasmsg(sashelp.dmine, lnka.resetconflevel_err, noquote));
32370     +                  %put &errormsg;
32371     +                  %put &em_codebar;
32372     +                  %let errorflag=&errorflag+1;
32373     +                  %return;
32374     +            %end;
32376     +       %end;
32377     +       /*Get distinct nodes from links and look up weight from _nodes*/
32378     +       %em_linkan_getnodesfromlinks(nodes=&nodes, links=&links, lookupnodes=_nodes);
32380     +       proc delete data =aout;run;
32381     +       proc delete data=_ruleout;run;
32384     +    /*-------- create Recommend Rules ---------------------*/
32386     +    data &EM_USER_RECDRULES;
32387     +        set &links;
32388     +        rename from=item1;
32389     +        rename to = item2;
32390     +        rename conf=confidence;
32391     +        rename weight= count;
32392     +        rename linkid=RuleID;
32393     +        label   to= "%sysfunc(sasmsg(sashelp.dmine, lnka_recommendeditems_vlabel , noquote))";
32394     +    run;
32396     +%mend em_linkan_TransToGraph_AssocSeq;
32398     +%macro em_linkan_recommend(intrans=, ar=, outtrans=);
32399     +/*intrans: transaction data;
32400     +  ar=association rule, i.e.,&EM_USER_RECDRULES;
32401     +  outtrans=output recommendation table;*/
32403     +  *get the recommended items;
32404     +  *assuming the length of inferences is limit to one association rule;
32405     +  %let id=%EM_ID;
32406     +  %let target=%EM_TARGET;
32407     +  proc sql;
32408     +      create table tmp1 as
32409     +      select a.&id, b.item2 as &target, sum(b.count*b.confidence)/sum(b.count) as confidence
32410     +      from &intrans a, &ar b
32411     +      where a.&target = b.item1
32412     +      group by a.&id, b.item2
32413     +      order by a.&id, confidence desc
32414     +      ;
32415     +  quit;
32417     +  proc sql noprint;
32418     +      create table tmp2 as
32419     +      select tmp1.&id, tmp1.&target
32420     +      from tmp1
32421     +      except
32422     +      select c.&id, c.&target
32423     +      from &intrans c
32424     +      ;
32425     +      create table _outtrans as
32426     +      select a.*, b.confidence
32427     +      from tmp2 a, tmp1 b
32428     +      where a.&id=b.&id and a.&target=b.&target
32429     +      order by a.&id, confidence desc
32430     +      ;
32431     +  quit;
32433     +  data &outtrans;
32434     +      set _outtrans;
32435     +      by &id; retain rank 0;
32436     +      if first.&id then rank=1;
32437     +      else rank+1;
32438     +      label   confidence= "%sysfunc(sasmsg(sashelp.dmine, lnka_confidence_vlabel , noquote))";
32439     +      label   rank= "%sysfunc(sasmsg(sashelp.dmine, lnka_rank_vlabel , noquote))";
32440     +      label   &id="%sysfunc(sasmsg(sashelp.dmine, lnka_idv_vlabel , noquote))";
32441     +  run;
32443     +  proc datasets lib=work nolist;
32444     +     delete tmp1 tmp2 _outtrans;
32445     +  run;
32446     +%mend em_linkan_recommend;
32449     +%macro em_linkan_getoverlap2_rela(trans=,overlap=,overlap2=);    /*for relational data*/
32451     +%let tarname=%EM_TARGET;
32453     +proc sql;
32454     +  create table trans2 as
32455     +  select  distinct item, level, _category as varname
32456     +  from &trans;
32457     +quit;
32459     +/*remove target's contribution for scoring:strip(trans2.varname) ne "&tarname"*/
32460     +proc sql;
32461     +  create table _overlap2 as
32462     +  select b.node, trans2.varname, trans2.level,b.ItemCluster as ItemCluster, b.intensity
32463     +  from trans2,&overlap as b
32464     +  where trans2.item=b.node and strip(trans2.varname) ne "&tarname";
32466     +  create table &overlap2 as
32467     +  select d.*, c.FORMAT, c.TYPE,c.LENGTH
32468     +   from
32469     +     _overlap2 as d
32470     +  left join
32471     +     &EM_IMPORT_DATA_CMETA as c
32472     +  on d.varname=c.NAME
32473     +  order by d.node, d.ItemCluster;
32474     +quit;
32476     +data &overlap2;
32477     +    set &overlap2;
32478     +    if strip(format) eq '$' then format = ' ';
32479     +    if missing(format) then do;
32480     +       if type eq '' then format='best32.';
32481     +        else if type eq 'N'
32482     +            then format=cats('best',length,'.');
32483     +            else format=cats('$',length,'.');
32484     +    end;
32485     +    else do;
32486     +    if index(format,'.') le 0
32487     +           then format=cats(format,'.');
32488     +    end;
32489     +    if upcase(format) eq  'BEST.'
32490     +           then format='best32.';
32491     +    drop length type;
32492     +run;
32494     +proc datasets lib=work nolist;
32495     +  delete trans2 _overlap2;
32496     +run;
32498     +%mend em_linkan_getoverlap2_rela;
32500     +%macro em_linkan_getoverlap2_trans(overlap=,overlap2=,target=);    /*for transactional data*/
32503     +proc sql;
32504     +  create table &overlap2(drop=_tmpnode_) as
32505     +  select tranwrd( _tmpnode_,"'","''") as node, *, "&target" as varname
32506     +  from &overlap(rename=(node=_tmpnode_));
32507     +quit;
32509     +%mend em_linkan_getoverlap2_trans;
32513     +/*-----------------------------------------------------------------------------------
32515     +     Call proc optgraph to get Centrality Measure and Community Info(Undirected Graph Only)
32517     +------------------------------------------------------------------------------------*/
32520     +%macro em_linkan_AnalyzeGraph(outnodes =,
32521     +                              clustering_coef =,
32522     +                              influence = ,
32523     +                              close =,
32524     +                              between =  ,
32525     +                              eigen = ,
32526     +                              eigen_algorithm = ,
32527     +                              eigen_maxiter = ,
32528     +                              hub = ,
32529     +                              auth = ,
32530     +                              seq=,
32531     +                              max_comm_size=,
32532     +                              max_diameter=,
32533     +                              relation= ,
32534     +                              commalgorithm = ,
32535     +                              link_removal_ratio = ,
32536     +                              max_iterations = ,
32537     +                              modularity = ,
32538     +                              resolution_list =
32539     +                              );
32541     +   %if &seq. eq %then %do;
32542     +       %EM_GETNAME(KEY=COMMNODE, TYPE=DATA);
32543     +       %EM_GETNAME(KEY=COMMLINK, TYPE=DATA);
32544     +       %EM_GETNAME(KEY=COMMOVERLAP, TYPE=DATA);
32545     +       %EM_GETNAME(KEY=COMMLEVEL, TYPE=DATA);
32546     +   %end;
32547     +   %EM_GETNAME(KEY=NODES, TYPE=DATA);
32548     +   %EM_GETNAME(KEY=LINKS, TYPE=DATA);
32550     +   data &EM_USER_LINKS;
32551     +       set &EM_USER_LINKS;
32552     +       weightInv=1.0/weight;
32553     +   run;
32555     +   proc optgraph
32556     +       data_nodes = &EM_USER_NODES
32557     +       data_links = &EM_USER_LINKS
32558     +    %if &seq. eq %then %do;
32559     +       graph_direction =undirected
32560     +    %end;
32561     +    %else %do;
32562     +       graph_direction =directed
32563     +    %end;
32565     +    %if &transaction_data_indicator=0 %then %do;  /*relational data*/
32566     +       out_nodes = _outnodes;
32567     +    %end;
32568     +    %else %do;
32569     +       out_nodes =&outnodes ;
32570     +    %end;
32572     +       centrality
32573     +       %if &seq. eq %then %do;
32574     +                 degree = out
32575     +               %if "&eigen"="Y" %then %do;
32576     +                 eigen = both
32577     +               eigen_algorithm =&eigen_algorithm
32578     +               eigen_maxiter = &eigen_maxiter
32579     +               %end;
32580     +       %end;
32581     +       %else %do;
32582     +                 degree = both
32583     +                %if "&hub"="Y" %then %do;
32584     +                 hub=both
32585     +                %end;
32586     +                %if "&auth"="Y" %then %do;
32587     +                 auth=both
32588     +                %end;
32589     +                %if "&hub"="Y" or "&auth"="Y" %then %do;
32590     +                 eigen_algorithm =&eigen_algorithm
32591     +                 eigen_maxiter = &eigen_maxiter
32592     +                %end;
32593     +       %end;
32594     +        %if "&clustering_coef"="Y" %then %do;
32595     +                 clustering_coef
32596     +        %end;
32597     +        %if "&influence"="Y" %then %do;
32598     +               influence = both
32599     +        %end;
32600     +        %if "&close"="Y" %then %do;
32601     +                close =   both
32602     +        %end;
32603     +        %if "&between"="Y" %then %do;
32604     +                between = both
32605     +        %end;
32606     +        %if "&close"="Y" or "&between"="Y"  %then %do;
32607     +               weight2=weightInv
32608     +        %end;
32609     +      ;
32611     +       %if &seq. eq %then %do;  /*relational or transactional with no seq*/
32612     +       community
32613     +                algorithm =  &commalgorithm
32614     +                link_removal_ratio =&link_removal_ratio
32615     +                maxiter =  &max_iterations
32616     +                modularity = &modularity
32617     +                resolution_list =  &resolution_list
32618     +              /*  recursive (max_comm_size=&max_comm_size. max_diameter=&max_diameter. relation=&relation.)    */
32619     +                out_comm_links=&EM_USER_COMMLINK
32620     +                out_community=&EM_USER_COMMNODE
32621     +                out_level=&EM_USER_COMMLEVEL
32622     +                out_overlap=&EM_USER_COMMOVERLAP
32623     +       ;
32624     +       %end;
32625     +   run;
32627     +   proc delete data=&EM_USER_NODES;run;
32629     +   /*Change Community Data, map community 0-N to 1-N+1*/
32630     +   %if &seq. eq %then %do;
32632     +       data &EM_USER_COMMLINK;
32633     +             format from_community_id $100. to_community_id $100.;
32634     +             label  from_community_id="%sysfunc(sasmsg(sashelp.dmine,lnka_from_community_id_vlabel, noquote))" ;
32635     +             label  to_community_id="%sysfunc(sasmsg(sashelp.dmine,lnka_to_community_id_vlabel, noquote))" ;
32636     +             label link_weight ="%sysfunc(sasmsg(sashelp.dmine, lnka_weight_vlabel, noquote))" ;
32637     +             label linkid ="%sysfunc(sasmsg(sashelp.dmine, lnka_linkid_vlabel, noquote))" ;
32638     +             set &EM_USER_COMMLINK;
32639     +             from_community = from_community+1;
32640     +             to_community   = to_community+1;
32641     +             from_community_id = cats(from_community);
32642     +             to_community_id   = cats(to_community);
32643     +             linkid=_N_;
32644     +             rename from_community_id =from_ItemClusterID to_community_id =to_ItemClusterID;
32645     +             drop level resolution from_community to_community;
32646     +       run;
32648     +       data &EM_USER_COMMNODE;
32649     +             format community_id $100.;
32650     +             label  community_id="%sysfunc(sasmsg(sashelp.dmine,lnka_community_id_vlabel, noquote))" ;
32651     +             label  community="%sysfunc(sasmsg(sashelp.dmine,lnka_community_1_vlabel, noquote))" ;
32652     +             label  nodes="%sysfunc(sasmsg(sashelp.dmine,lnka_nodes_vlabel, noquote))" ;
32653     +             set &EM_USER_COMMNODE;
32654     +             community = community+1;
32655     +             community_id   = cats(community);
32656     +             rename community=ItemCluster community_id=ItemClusterID;
32657     +             drop level resolution;
32658     +       run;
32660     +       data &EM_USER_COMMOVERLAP;
32661     +             format community_id $100.;
32662     +             label  community_id="%sysfunc(sasmsg(sashelp.dmine,lnka_community_id_vlabel, noquote))" ;
32663     +             label  community="%sysfunc(sasmsg(sashelp.dmine,lnka_community_1_vlabel, noquote))" ;
32664     +             label node ="%sysfunc(sasmsg(sashelp.dmine, lnka_node_vlabel, noquote))" ;
32665     +             label intensity ="%sysfunc(sasmsg(sashelp.dmine, lnka_intensity_vlabel, noquote))" ;
32666     +             label community ="%sysfunc(sasmsg(sashelp.dmine, lnka_community_1_vlabel, noquote))" ;
32667     +             label linkid ="%sysfunc(sasmsg(sashelp.dmine, lnka_linkid_vlabel, noquote))" ;
32668     +             set &EM_USER_COMMOVERLAP;
32669     +             community = community+1;
32670     +             community_id   = cats(community);
32671     +             linkid=_N_;
32672     +             rename community_id=ItemClusterID community=ItemCluster;
32673     +       run;
32676     +   %end;
32678     +   /*---- add group info: which var item is from, Only relational data has LOOKUP table**/
32680     +   %if &transaction_data_indicator=0 %then %do;
32681     +      proc sql;
32682     +           create table  &OUTNODES as
32683     +                  select  *
32684     +                  from _outnodes as A, &EM_USER_LOOKUP as B
32685     +                  where  A.node=B.Item;
32686     +           alter table  &OUTNODES  drop item;
32687     +      quit;
32688     +      proc delete data=_outnodes;run;
32689     +      proc delete data=&EM_USER_LOOKUP;
32691     +   %end;
32692     +   %else %do;/*For transactional data, add group info*/
32693     +       %let target=%EM_TARGET;
32694     +        data &EM_USER_OUTNODES;
32695     +        format _group $32.;
32696     +             set &EM_USER_OUTNODES;
32697     +        _group="&target";
32698     +        *_group_ind=1;/*don't need it for color*/
32699     +        run;
32701     +   %end;
32703     +   %if &seq. eq %then %do;
32704     +      data &OUTNODES;
32705     +           format community_id $100.;
32706     +           label  community_id="%sysfunc(sasmsg(sashelp.dmine,lnka_community_id_vlabel, noquote))" ;
32707     +           set &OUTNODES;
32708     +           community_1=community_1+1;
32709     +           community_id=cats(community_1);
32710     +           rename community_id=ItemClusterID;
32711     +    run;
32712     +   %end;
32713     +   data &OUTNODES;;
32714     +     set &OUTNODES;
32715     +     %if &transaction_data_indicator=0 %then %do;
32716     +     drop level;
32717     +     %end;
32718     +           label  node="%sysfunc(sasmsg(sashelp.dmine, lnka_node_vlabel, noquote))" ;
32719     +           label  weight="%sysfunc(sasmsg(sashelp.dmine, lnka_weight_vlabel, noquote))";
32720     +           label  _group= "%sysfunc(sasmsg(sashelp.dmine, lnka_group_vlabel, noquote))";
32721     +           label  _category= "%sysfunc(sasmsg(sashelp.dmine, lnka_category_vlabel, noquote))";
32722     +           label  community_1= "%sysfunc(sasmsg(sashelp.dmine, lnka_community_1_vlabel, noquote))";
32723     +           label  centr_degree_in= "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_degree_in_vlabel, noquote))";
32724     +           label  centr_degree_out= "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_degree_out_vlabel, noquote))";
32725     +           label  centr_degree = "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_degree_vlabel, noquote))";
32726     +           label  centr_close_wt = "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_close_wt_vlabel, noquote))";
32727     +           label  centr_close_in_wt= "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_close_in_wt_vlabel, noquote))";
32728     +           label  centr_close_out_wt= "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_close_out_wt_vlabel, noquote))";
32729     +           label  centr_close_unwt = "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_close_unwt_vlabel, noquote))";
32730     +           label  centr_close_in_unwt= "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_close_in_unwt_vlabel, noquote))";
32731     +           label  centr_close_out_unwt= "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_close_out_unwt_vlabel, noquote))";
32732     +           label  centr_between_wt = "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_between_wt_vlabel, noquote))";
32733     +           label  centr_between_unwt= "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_between_unwt_vlabel, noquote))";
32734     +           label  centr_influence1_wt = "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_influence1_wt_vlabel, noquote))";
32735     +           label  centr_influence1_unwt= "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_influence1_unwt_vlabel, noquote))";
32736     +           label  centr_influence2_wt = "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_influence2_wt_vlabel, noquote))";
32737     +           label  centr_influence2_unwt= "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_influence2_unwt_vlabel, noquote))";
32738     +           label  centr_cluster= "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_cluster_vlabel, noquote))";
32739     +           label  centr_eigen_wt = "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_eigen_wt_vlabel, noquote))";
32740     +           label  centr_eigen_unwt= "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_eigen_unwt_vlabel, noquote))";
32741     +           label  centr_auth_wt = "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_auth_wt_vlabel, noquote))";
32742     +           label  centr_auth_unwt= "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_auth_unwt_vlabel, noquote))";
32743     +           label  centr_hub_wt = "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_hub_wt_vlabel, noquote))";
32744     +           label  centr_hub_unwt= "%sysfunc(sasmsg(sashelp.dmine, lnka_centr_hub_unwt_vlabel, noquote))";
32745     +           rename community_1=ItemCluster;
32746     +  run;
32748     +   %em_getname(key=CENTMEASURE, type=data);
32749     +   %em_getname(key=WTDCENTMEASURE, type=data);
32750     +   /*Seperate &outnodes to two tables: Unweighted Centrality Measure Table and Weighted Centrality Measure Table for bar chart output*/
32751     +   proc sql;
32752     +      create table &EM_USER_CENTMEASURE as
32753     +            select node, centr_degree_out
32754     +            %if &seq. ne  %then %do;
32755     +                , centr_degree_in ,  centr_degree
32756     +                %if "&hub"="Y" %then %do;
32757     +                  , centr_hub_unwt
32758     +                %end;
32759     +                %if "&auth"="Y" %then %do;
32760     +                  , centr_auth_unwt
32761     +                %end;
32762     +            %end;
32763     +            %else %do;
32764     +                %if "&eigen"="Y" %then %do;
32765     +                , centr_eigen_unwt
32766     +               %end;
32767     +            %end;
32768     +            %if "&clustering_coef"="Y" %then %do;
32769     +                 , centr_cluster
32770     +             %end;
32771     +             %if "&close"="Y" %then %do;
32772     +                   , centr_close_unwt
32773     +             %end;
32774     +             %if "&between"="Y" %then %do;
32775     +                   , centr_between_unwt
32776     +             %end;
32777     +             %if "&influence"="Y" %then %do;
32778     +                  , centr_influence1_unwt
32779     +                  , centr_influence2_unwt
32780     +             %end;
32781     +            from &outnodes;
32783     +      create table &EM_USER_WTDCENTMEASURE as
32784     +            select node, centr_degree_out
32785     +            %if &seq. ne  %then %do;
32786     +                , centr_degree_in ,  centr_degree
32787     +                %if "&hub"="Y" %then %do;
32788     +                 , centr_hub_wt
32789     +                %end;
32790     +                %if "&auth"="Y" %then %do;
32791     +                  , centr_auth_wt
32792     +                %end;
32793     +            %end;
32794     +            %else %do;
32795     +                %if "&eigen"="Y" %then %do;
32796     +                , centr_eigen_wt
32797     +               %end;
32798     +            %end;
32799     +            %if "&clustering_coef"="Y" %then %do;
32800     +                 , centr_cluster
32801     +             %end;
32802     +             %if "&close"="Y" %then %do;
32803     +                  , centr_close_wt
32804     +             %end;
32805     +             %if "&between"="Y" %then %do;
32806     +                  , centr_between_wt
32807     +             %end;
32808     +             %if "&influence"="Y" %then %do;
32809     +                  , centr_influence1_wt
32810     +                  , centr_influence2_wt
32811     +             %end;
32812     +            from &outnodes;
32813     +   quit;
32816     +data &EM_USER_LINKS;
32817     +set &EM_USER_LINKS;
32818     +drop weightInv;
32819     +run;
32821     +%mend em_linkan_AnalyzeGraph;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_LINKANALYSIS_MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_LINKANALYSIS_MAIN):   filename temp catalog 'sashelp.emexpl.link_report.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.LINK_REPORT.SOURCE.
32824     +%MACRO EM_LINKANALYSIS_REPORT ;
32826     + %let em_lnka_transdata_indicator=0;
32827     + %if ("&EM_IMPORT_TRANSACTION" ne "") and (%sysfunc(exist(&EM_IMPORT_TRANSACTION)) or %sysfunc(exist(&EM_IMPORT_TRANSACTION, view))) %then %do;
32828     +      %let  em_lnka_transdata_indicator=1;
32829     + %end;
32831     + %em_getname(key=RULES, type=data);
32832     + %em_getname(key=OUTNODES, type=data);
32833     + %em_getname(key=LINKS, type=data);
32834     + %em_getname(key=RECDRULES, type=data);
32835     + %em_getname(key=CENTMEASURE, type=data);
32836     + %em_getname(key=WTDCENTMEASURE, type=data);
32839     + /*--------- Community ------------------------------------------------------------------*/
32840     + %if %EM_SEQUENCE eq or em_lnka_transdata_indicator=0 %then %do;           /*In case there is sequence var in relational data*/
32841     +    %EM_GETNAME(KEY=COMMNODE, TYPE=DATA);
32842     +    %EM_GETNAME(KEY=COMMLINK, TYPE=DATA);
32843     +    %EM_GETNAME(KEY=COMMOVERLAP, TYPE=DATA);
32844     +    %EM_GETNAME(KEY=COMMOVLNODE, TYPE=DATA); /*store commoverlap node data*/
32847     +     %EM_REPORT(linkkey=COMMLINK, nodekey=COMMNODE, viewtype=Constellation,  autodisplay=Y, block=PLOT,
32848     +                linkfrom=from_ItemClusterID,  linkto=to_ItemClusterID, linkwidth=link_weight, linkid=linkid, nodeid=ItemClusterID, nodesize=nodes,description=communityconstellation);
32851     +    /*Constellation plot of Nodes and Community*/
32853     +    /*Source: Node or Community*/
32854     +     proc sql;
32855     +      create table _node1 as
32856     +      select distinct node,"%sysfunc(sasmsg(sashelp.dmine, lnka_node_vlabel, noquote))" as _group
32857     +      from  &EM_USER_COMMOVERLAP;
32858     +      create table _node2 as
32859     +      select distinct ItemClusterID as node,"%sysfunc(sasmsg(sashelp.dmine, lnka_community_1_vlabel, noquote))" as _group
32860     +      from &EM_USER_COMMOVERLAP;
32861     +     quit;
32863     +     data &EM_USER_COMMOVLNODE;
32864     +      retain node _group _group_ind;
32865     +      format _group $32.;
32866     +      set _node1 _node2;
32867     +      if _group="%sysfunc(sasmsg(sashelp.dmine, lnka_node_vlabel, noquote))" then _group_ind=1;
32868     +      if _group="%sysfunc(sasmsg(sashelp.dmine, lnka_community_1_vlabel, noquote))" then _group_ind=2;
32869     +      label _group ="%sysfunc(sasmsg(sashelp.dmine, lnka_group_vlabel, noquote))" ;
32870     +      label _group_ind ="%sysfunc(sasmsg(sashelp.dmine, lnka_groupind_vlabel, noquote))" ;
32871     +      label node ="%sysfunc(sasmsg(sashelp.dmine, lnka_node_vlabel, noquote))" ;
32872     +     run;
32874     +     %EM_REPORT(linkkey=COMMOVERLAP, nodekey=COMMOVLNODE, viewtype=Constellation,  autodisplay=N, block=PLOT,
32875     +                linkfrom=node,  linkwidth=intensity, linkid=linkid, linkto=ItemClusterID, nodeid=node, nodecolor=_group_ind, description=nodeandcommunityconstellation);
32878     + %end;
32880     + /*-----------Centrality Table---------------------------------------------------------------*/
32882     + %if %EM_SEQUENCE eq or em_lnka_transdata_indicator=0 %then %do;        /*undirected graph has community info*/
32883     +     %EM_REPORT (KEY=OUTNODES , VIEWTYPE= bar,  autodisplay=Y, x=node, sortorder=desc, freq=weight, byset=ItemClusterID, color=ItemCluster, block=PLOT, description=NodeFrequencyHistogramByCommunity);
32884     +    %if  (&em_lnka_transdata_indicator=1) and ("&em_property_RECOMMENDIND" eq "Y")  %then %do;
32885     +        %EM_REPORT (KEY=OUTNODES , VIEWTYPE= pie,  autodisplay=N, x=ItemClusterID, freq=weight, block=PLOT, description=CommunitySizePie);
32886     +    %end;
32887     +    %else %do;
32888     +        %EM_REPORT (KEY=OUTNODES , VIEWTYPE= pie,  autodisplay=Y, x=ItemClusterID, freq=weight, block=PLOT, description=CommunitySizePie);
32889     +    %end;
32890     +    %EM_REPORT (KEY=OUTNODES , VIEWTYPE= bar,  autodisplay=N, x=node, sortorder=desc, freq=weight, color=ItemCluster, block=PLOT, description=NodeFrequencyHistogram);
32891     + %end;
32892     + %else %do;
32893     +   %EM_REPORT(KEY=OUTNODES , VIEWTYPE= bar,  autodisplay=Y, x=node, sortorder=DESC,  freq=weight, block=PLOT, description=NodeFrequencyHistogram);
32894     + %end;
32896     + %EM_REPORT(KEY=LINKS , VIEWTYPE=HISTOGRAM,  autodisplay=N, x=weight, block=PLOT, description=LinkFrequencyHistogram);
32898     + %EM_REPORT (KEY=CENTMEASURE , VIEWTYPE= bar,    autodisplay=N, x=node, sortorder=DESC, freq=_anynumeric_, block=PLOT, description=UnwtdCentralityMeasure);
32899     + %EM_REPORT (KEY=WTDCENTMEASURE , VIEWTYPE= bar,  autodisplay=Y, x=node, sortorder=DESC, freq=_anynumeric_, block=PLOT, description=WtdCentralityMeasure);
32901     + /*-----------Rules Table-----Controls by rules property: sortby and topnrules--------------*/
32902     + %if "&EM_PROPERTY_SORTBY"="COUNT" %then %do;
32903     +        %let sortby=count;
32904     + %end;
32906     + %if "&EM_PROPERTY_SORTBY"="SUPPORT" %then %do;
32907     +        %let sortby=support;
32908     + %end;
32910     + %if "&EM_PROPERTY_SORTBY"="LIFT" %then %do;
32911     +     %if %EM_SEQUENCE eq or em_lnka_transdata_indicator=0 %then %do;
32912     +         %let sortby=lift;
32913     +     %end;
32914     +     %else %do;
32915     +         %let sortby=pseudolift;
32916     +     %end;
32917     + %end;
32919     + %if "&EM_PROPERTY_SORTBY"="CONFIDENCE" %then %do;
32920     +        %let sortby=confidence;
32921     + %end;
32923     + %if "&EM_PROPERTY_SORTBY"="EXP_CONF" %then %do;
32924     +     %if %EM_SEQUENCE eq or em_lnka_transdata_indicator=0 %then %do;
32925     +        %let sortby=EXP_CONF;
32926     +     %end;
32927     +     %else %do;
32928     +        %let EMEXCEPTIONSTRING = exception.server.lnka.sortbyinvaliderr;
32929     +        %put &em_codebar;
32930     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, lnka.sortbyinvalid_err, noquote));
32931     +        %put &errormsg;
32932     +        %put &em_codebar;
32933     +        %return;
32934     +     %end;
32936     + %end;
32938     + proc sort data =&EM_USER_RECDRULES out=_RECDRULES;
32939     +        by DESCENDING &sortby;
32940     + run;
32942     + data &EM_USER_RULES;
32943     +     length RuleID 8.;
32944     +     set _RECDRULES;
32945     +     RuleID=_N_;
32946     +     label RuleID ="%sysfunc(sasmsg(sashelp.dmine, lnka_ruleid_vlabel, noquote))" ;
32947     +     if _N_ le &EM_PROPERTY_TOPNRULES;
32948     + run;
32950     + /*From proc, no need to do labeling, but RuleID*/
32954     +   %if %EM_SEQUENCE eq or em_lnka_transdata_indicator=0 %then %do;
32955     +    %EM_REPORT(key=RULES,  viewtype=BAR, View=10, block=PLOT, Autodisplay=N, x=RuleID, SortOrder=DESC,  FREQ=confidence, TIP=RULE, description=RuleStatistics) ;
32956     +    %EM_REPORT(VIEW=10, Freq=EXP_CONF);
32957     +    %EM_REPORT(VIEW=10, Freq=SUPPORT);
32958     +    %EM_REPORT(VIEW=10, Freq=COUNT);
32959     +    %EM_REPORT(VIEW=10, Freq=LIFT);
32960     +   %end;
32961     +   %else %do;
32962     +    %EM_REPORT(key=RULES,  viewtype=BAR, View=10, block=PLOT, Autodisplay=Y, x=RuleID, SortOrder=DESC,  FREQ=confidence, TIP=RULE, description=RuleStatistics) ;
32963     +    %EM_REPORT(VIEW=10, Freq=EXP_CONF);
32964     +    %EM_REPORT(VIEW=10, Freq=SUPPORT);
32965     +    %EM_REPORT(VIEW=10, Freq=COUNT);
32966     +    %EM_REPORT(VIEW=10, Freq=PSEUDOLIFT);
32967     +   %end;
32970     + /*--------explore data in constellation plot only if input data is transactional data---------*/
32972     + %if  &em_lnka_transdata_indicator=1 %then %do;
32973     + %let idv=%EM_ID;
32974     + %let target=%EM_TARGET;
32975     +   %em_getname(key=TRANSNODES, type=data);
32976     +   data &EM_USER_TRANSNODES;
32977     +           set &EM_USER_TRANSNODES;
32978     +           label node="%sysfunc(sasmsg(sashelp.dmine, lnka_node_vlabel , noquote))" ;
32979     +           label  _group="%sysfunc(sasmsg(sashelp.dmine, lnka_group_vlabel , noquote))";
32980     +           label _group_ind= "%sysfunc(sasmsg(sashelp.dmine, lnka_groupind_vlabel , noquote))";
32981     +   run;
32982     +   %em_getname(key=TRANSLINKS, type=data);
32983     +   data &EM_USER_TRANSLINKS;
32984     +           set &EM_USER_TRANSLINKS;
32985     +           rename from=&idv to=&target;
32986     +           label  weight="%sysfunc(sasmsg(sashelp.dmine, lnka_weight_vlabel , noquote))";
32987     +           label  linkid= "%sysfunc(sasmsg(sashelp.dmine, lnka_linkid_vlabel, noquote))";
32988     +           label from= "%sysfunc(sasmsg(sashelp.dmine,lnka_idv_vlabel , noquote))";
32989     +           label to= "%sysfunc(sasmsg(sashelp.dmine,lnka_target_vlabel , noquote))";
32990     +   run;
32991     +   %EM_REPORT(linkkey=TRANSLINKS, nodekey=TRANSNODES, viewtype=Constellation,  byset=_group node, autodisplay=N, block=PLOT,
32992     +        linkfrom=&idv, linkto=&target,linkid=linkid,linkwidth=weight, nodecolor=_group_ind, nodeid=node, description=ExploreTransData);
32993     + %end;
32995     + /*--------------------Link Analysis Constellation Plot--------------------------*/
32997     + %em_getname(key=LINKS, type=data);
32998     + /*%let idv=%EM_ID;*/
32999     +      data &EM_USER_LINKS;
33000     +           set &EM_USER_LINKS;
33001     +           %if  &em_lnka_transdata_indicator=0 or %EM_SEQUENCE eq %then %do;
33002     +             drop set_size rule;
33003     +             retain linkid from to weight support conf exp_conf lift;
33004     +           %end;
33005     +           %else %do;
33006     +             drop nitems rule;
33007     +             retain linkid from to weight support conf pseudolift;
33008     +           %end;
33009     +           label  linkid= "%sysfunc(sasmsg(sashelp.dmine,lnka_linkid_vlabel, noquote))";
33010     +           label  from = "%sysfunc(sasmsg(sashelp.dmine,lnka_from_vlabel , noquote))";
33011     +           label  to = "%sysfunc(sasmsg(sashelp.dmine,lnka_to_vlabel , noquote))";
33012     +       run;
33014     +       /*Exception Handling*/
33015     +       proc sql noprint;
33016     +           select count(*) into: linkrows
33017     +           from &EM_USER_LINKS;
33018     +       quit;
33020     +       %if &linkrows>10000 %then %do;
33021     +       /*exception handling for links data that exceeds the row download limit of 20k;
33022     +       *Create sample node data from the top 20k rows of links data;*/
33023     +            %em_getname(key=SAMPLENODES, type=data);
33024     +            data &EM_USER_LINKS;
33025     +                set &EM_USER_LINKS(obs=10000);
33026     +            run;
33028     +            %em_linkan_getnodesfromlinks(nodes=&EM_USER_SAMPLENODES,links=&EM_USER_LINKS,lookupnodes=&EM_USER_OUTNODES);
33029     +           %let nodekey=SAMPLENODES;
33030     +       %end;
33031     +       %else %do;
33032     +           %let nodekey=OUTNODES;
33033     +       %end;
33035     + %if  &em_lnka_transdata_indicator=0 %then %do;*relational data:  byset, _category: which var the item is from;
33036     +      %EM_REPORT(linkkey=LINKS, nodekey=&nodekey, viewtype=Constellation,  autodisplay=Y, block=PLOT,
33037     +        linkfrom=from, linkto=to,linkid=linkid,linkwidth=weight, byset=_group node,  nodecolor=ItemCluster, nodeshape=_group, nodeid=node, nodesize = weight, description=constellplot);
33038     + %end;
33039     + %else %if  %EM_SEQUENCE eq %then %do;*transactional data with no seq var: has byset;
33040     +     %EM_REPORT(linkkey=LINKS, nodekey=&nodekey, viewtype=Constellation,  autodisplay=Y, block=PLOT,
33041     +        linkfrom=from, linkto=to,linkid=linkid,linkwidth=weight, byset=_group node, nodecolor=ItemCluster, nodeid=node, nodesize = weight, description=constellplot);
33042     + %end;
33043     + %else %do;
33044     + *transactional data with seq var: has byset, directed graph(direction=y;
33045     +     %EM_REPORT(linkkey=LINKS, nodekey=&nodekey, viewtype=Constellation,  autodisplay=Y, block=PLOT,
33046     +        linkfrom=from, linkto=to,linkid=linkid,linkwidth=weight, direction=y,  byset=_group node, nodeid=node, nodesize = weight, description=constellplot);
33047     + %end;
33051     + %if  (&em_lnka_transdata_indicator=1) and ("&em_property_RECOMMENDIND" eq "Y")  %then %do;
33052     +            %let &target=%EM_TARGET;
33053     +            %em_getname(key=RECOMMEND, type=data);
33054     +              data &EM_USER_RECOMMEND;
33055     +                  set &EM_USER_RECOMMEND;
33056     +                  label  &target= "%sysfunc(sasmsg(sashelp.dmine,lnka_recommendeditems_vlabel, noquote))";
33057     +              run;
33058     +              %EM_REPORT (KEY     = RECOMMEND ,
33059     +                          VIEWTYPE    = data,byset=%EM_ID,
33060     +                          autodisplay=N,
33061     +                          block=Recommendations,
33062     +                          description=RecommendationTable);
33063     +              /*-----------Filtered Recommendation Table: autodisplay=Y, criteria: Top N or Minimum Confidence------------   */
33064     +              %if (&EM_PROPERTY_CONFFILTER ne .) or (&EM_PROPERTY_TOPN ne .) %then %do;
33065     +                        %em_getname(key=RECOMMENDFILTERED, type=data);
33066     +                        data &EM_USER_RECOMMENDFILTERED;
33067     +                              set &EM_USER_RECOMMENDFILTERED;
33068     +                              label  &target= "%sysfunc(sasmsg(sashelp.dmine,lnka_recommendeditem_vlabel, noquote))";
33069     +                        run;
33070     +                        %EM_REPORT (KEY     = RECOMMENDFILTERED ,
33071     +                                    VIEWTYPE    = data,
33072     +                                    autodisplay=Y,
33073     +                                    block=Recommendations,
33074     +                                    description=RecommendationFilteredTable);
33075     +              %end;
33076     + %end;
33078     +%MEND EM_LINKANALYSIS_REPORT ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_LINKANALYSIS_MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_LINKANALYSIS_REPORT):  ;
MPRINT(EM_LINKANALYSIS_REPORT):  ;
MPRINT(EM_LINKANALYSIS_REPORT):  ;
MPRINT(EM_LINKANALYSIS_REPORT):  ;
MPRINT(EM_LINKANALYSIS_REPORT):  ;
MPRINT(EM_LINKANALYSIS_REPORT):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "OUTNODES";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "bar";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "DESC";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "NodeFrequencyHistogram";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "node";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "weight";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "PLOT";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11256231559094;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_LINKANALYSIS_REPORT):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "LINKS";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "HISTOGRAM";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "LinkFrequencyHistogram";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "weight";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "PLOT";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58284199078699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_LINKANALYSIS_REPORT):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "CENTMEASURE";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "bar";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "DESC";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "UnwtdCentralityMeasure";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "node";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "_anynumeric_";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "PLOT";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89570535761104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 396 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_LINKANALYSIS_REPORT):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "WTDCENTMEASURE";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "bar";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "DESC";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "WtdCentralityMeasure";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "node";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "_anynumeric_";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "PLOT";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
The SAS System
 
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06084000089244;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 396 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 528 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_LINKANALYSIS_REPORT):  ;
MPRINT(EM_LINKANALYSIS_REPORT):   proc sort data =EMWS3.Link_RECDRULES out=_RECDRULES;
MPRINT(EM_LINKANALYSIS_REPORT):   by DESCENDING confidence;
MPRINT(EM_LINKANALYSIS_REPORT):   run;
 
NOTE: There were 111 observations read from the data set EMWS3.LINK_RECDRULES.
NOTE: The data set WORK._RECDRULES has 111 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_LINKANALYSIS_REPORT):   data EMWS3.Link_RULES;
MPRINT(EM_LINKANALYSIS_REPORT):   length RuleID 8.;
MPRINT(EM_LINKANALYSIS_REPORT):   set _RECDRULES;
MPRINT(EM_LINKANALYSIS_REPORT):   RuleID=_N_;
MPRINT(EM_LINKANALYSIS_REPORT):   label RuleID = "Rule ID" ;
MPRINT(EM_LINKANALYSIS_REPORT):   if _N_ le 100;
MPRINT(EM_LINKANALYSIS_REPORT):   run;
 
NOTE: There were 111 observations read from the data set WORK._RECDRULES.
NOTE: The data set EMWS3.LINK_RULES has 100 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "RULES";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "BAR";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "DESC";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "RuleStatistics";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "RuleID";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "confidence";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "PLOT";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "RULE";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 528 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 660 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_LINKANALYSIS_REPORT):   ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "EXP_CONF";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "CUSTOM";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 660 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 792 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_LINKANALYSIS_REPORT):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "SUPPORT";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "CUSTOM";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 792 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 924 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_LINKANALYSIS_REPORT):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "COUNT";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "CUSTOM";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 924 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1056 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_LINKANALYSIS_REPORT):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "PSEUDOLIFT";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "CUSTOM";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 10;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 1056 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1188 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_LINKANALYSIS_REPORT):  ;
MPRINT(EM_LINKANALYSIS_REPORT):  ;
MPRINT(EM_LINKANALYSIS_REPORT):   data EMWS3.Link_TRANSNODES;
MPRINT(EM_LINKANALYSIS_REPORT):   set EMWS3.Link_TRANSNODES;
MPRINT(EM_LINKANALYSIS_REPORT):   label node= "Node" ;
MPRINT(EM_LINKANALYSIS_REPORT):   label _group= "Group";
MPRINT(EM_LINKANALYSIS_REPORT):   label _group_ind= "Group Index";
MPRINT(EM_LINKANALYSIS_REPORT):   run;
 
NOTE: There were 366 observations read from the data set EMWS3.LINK_TRANSNODES.
NOTE: The data set EMWS3.LINK_TRANSNODES has 366 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.11 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_LINKANALYSIS_REPORT):  ;
MPRINT(EM_LINKANALYSIS_REPORT):   data EMWS3.Link_TRANSLINKS;
MPRINT(EM_LINKANALYSIS_REPORT):   set EMWS3.Link_TRANSLINKS;
MPRINT(EM_LINKANALYSIS_REPORT):   rename from=session_id to=requested_file;
MPRINT(EM_LINKANALYSIS_REPORT):   label weight= "Weight";
MPRINT(EM_LINKANALYSIS_REPORT):   label linkid= "Link ID";
MPRINT(EM_LINKANALYSIS_REPORT):   label from= "ID Variable";
MPRINT(EM_LINKANALYSIS_REPORT):   label to= "Target Variable";
MPRINT(EM_LINKANALYSIS_REPORT):   run;
 
NOTE: There were 4979 observations read from the data set EMWS3.LINK_TRANSLINKS.
NOTE: The data set EMWS3.LINK_TRANSLINKS has 4979 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.28 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "Constellation";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "FALSE";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "_group node";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "ExploreTransData";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "PLOT";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "TRANSLINKS";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "TRANSNODES";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "node";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "_group_ind";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "CIRCLE";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "linkid";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "session_id";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "requested_file";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "weight";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.4334444643154;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 1188 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1320 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_LINKANALYSIS_REPORT):  ;
MPRINT(EM_LINKANALYSIS_REPORT):  ;
MPRINT(EM_LINKANALYSIS_REPORT):   data EMWS3.Link_LINKS;
MPRINT(EM_LINKANALYSIS_REPORT):   set EMWS3.Link_LINKS;
MPRINT(EM_LINKANALYSIS_REPORT):   drop nitems rule;
MPRINT(EM_LINKANALYSIS_REPORT):   retain linkid from to weight support conf pseudolift;
MPRINT(EM_LINKANALYSIS_REPORT):   label linkid= "Link ID";
MPRINT(EM_LINKANALYSIS_REPORT):   label from = "Left Hand of Link";
MPRINT(EM_LINKANALYSIS_REPORT):   label to = "Right Hand of Link";
MPRINT(EM_LINKANALYSIS_REPORT):   run;
 
NOTE: There were 111 observations read from the data set EMWS3.LINK_LINKS.
NOTE: The data set EMWS3.LINK_LINKS has 111 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_LINKANALYSIS_REPORT):   proc sql noprint;
MPRINT(EM_LINKANALYSIS_REPORT):   select count(*) into: linkrows from EMWS3.Link_LINKS;
MPRINT(EM_LINKANALYSIS_REPORT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_LINKANALYSIS_REPORT):   *transactional data with seq var: has byset, directed graph(direction=y;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "Constellation";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "y";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "_group node";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "constellplot";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "PLOT";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "weight";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "LINKS";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "OUTNODES";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "node";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "CIRCLE";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "linkid";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "from";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "to";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "weight";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74771442531967;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 1320 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1452 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_LINKANALYSIS_REPORT):  ;
MPRINT(EM_LINKANALYSIS_REPORT):  ;
MPRINT(EM_LINKANALYSIS_REPORT):   data EMWS3.Link_RECOMMEND;
MPRINT(EM_LINKANALYSIS_REPORT):   set EMWS3.Link_RECOMMEND;
MPRINT(EM_LINKANALYSIS_REPORT):   label requested_file= "Recommended Items";
MPRINT(EM_LINKANALYSIS_REPORT):   run;
 
NOTE: There were 607 observations read from the data set EMWS3.LINK_RECOMMEND.
NOTE: The data set EMWS3.LINK_RECOMMEND has 607 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "RECOMMEND";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "data";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "session_id";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "RecommendationTable";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "Recommendations";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.87983127910635;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 1452 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1584 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_LINKANALYSIS_REPORT):  ;
MPRINT(EM_LINKANALYSIS_REPORT):  ;
MPRINT(EM_LINKANALYSIS_REPORT):   data EMWS3.Link_RECOMMENDFILTERED;
MPRINT(EM_LINKANALYSIS_REPORT):   set EMWS3.Link_RECOMMENDFILTERED;
MPRINT(EM_LINKANALYSIS_REPORT):   label requested_file= "Next Best Offer";
MPRINT(EM_LINKANALYSIS_REPORT):   run;
 
NOTE: There were 224 observations read from the data set EMWS3.LINK_RECOMMENDFILTERED.
NOTE: The data set EMWS3.LINK_RECOMMENDFILTERED has 224 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "RECOMMENDFILTERED";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "data";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "RecommendationFilteredTable";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "Recommendations";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09030269183698;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 1584 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1716 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_LINKANALYSIS_REPORT):  ;
MPRINT(EM_LINKANALYSIS_MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End REPORT: Link;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
33085      *------------------------------------------------------------*;
33086      * End REPORT: Link;
33087      *------------------------------------------------------------*;
 
33088      /* Reset EM Options */
33089      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):    options formchar="|----|+|---+=|-/\<>*";
33090      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
33091      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
33092      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
33093      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
33094      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1716 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1716 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
